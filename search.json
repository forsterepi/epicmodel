[{"path":"https://forsterepi.github.io/epicmodel/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://forsterepi.github.io/epicmodel/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://forsterepi.github.io/epicmodel/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://forsterepi.github.io/epicmodel/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://forsterepi.github.io/epicmodel/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://forsterepi.github.io/epicmodel/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://forsterepi.github.io/epicmodel/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://forsterepi.github.io/epicmodel/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://forsterepi.github.io/epicmodel/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://forsterepi.github.io/epicmodel/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://forsterepi.github.io/epicmodel/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://forsterepi.github.io/epicmodel/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://forsterepi.github.io/epicmodel/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://forsterepi.github.io/epicmodel/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://forsterepi.github.io/epicmodel/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://forsterepi.github.io/epicmodel/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://forsterepi.github.io/epicmodel/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://forsterepi.github.io/epicmodel/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://forsterepi.github.io/epicmodel/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://forsterepi.github.io/epicmodel/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://forsterepi.github.io/epicmodel/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://forsterepi.github.io/epicmodel/articles/epicmodel.html","id":"step-1-create-steplist","dir":"Articles","previous_headings":"","what":"Step 1: Create steplist","title":"epicmodel","text":"steplist input SCC model created. steplist contains many steps together form mechanisms outcome occurrence. steps basically /-statements can chained together form mechanisms, e.g., cell produces cytokine X cell B produces cytokine Y => cell B produces cytokine Y cell C produces cytokine Z. learn SCC models based steps exact structure looks like, see vignette(\"steplist\"). purpose introduction, enough know steps need specific structure order enable automatic SCC model creation. epicmodel therefore provides Steplist Creator Shiny App, helps creating steplist necessary structure. can launch shiny app : Throughout introduction, use built steplist_rain. steplist_rain dummy example describes ways getting wet. Let’s first inspect steplist using print(). Print tells us steplist contains. , see vignette(\"steplist\") find different things . can see two important things. First, steplist contains 10 steps, shows ’s probably realistic example. Second, first line tells steplist “unchecked” asks run check_steplist(). check_steplist() ensures steplist’s structure fine SCC model creation. can see output check_steplist() conducts many checks. See function documentation detailed description. case, checks successful therefore steplist now “checked”. running print() , see confirmation. checked steplist, can also use summary() plot(). Let’s start summary(): output contains outcome definition well steps split different types: Component causes, Interventions, End steps, steps. vignette(\"steplist\") tell different types steps. Now, let’s try plot().  plot() shows steps chained together. graph created using DiagrammeR package. legend shown graph links node labels steps tells module step belongs. Steps belong together can grouped modules creating steplist. node colors graph, e.g., depend step’s module. See vignette(\"modules\") learn . Later, see similar mechanisms every sufficient cause.","code":"launch_steplist_creator() steplist <- steplist_rain print(steplist) #> ✖ unchecked (please run `check_steplist()` before continuing) #> WHAT:  7  WHAT segments #> DOES:  6  DOES segments #> WHERE:  3  WHERE segments #> MODULE:  3  modules #> STEP:  10  STEPs #> ICC:  0  incompatible component-cause pairs #> OUTCOME:  1  outcome definition steplist_checked <- check_steplist(steplist) #>  #> ── Checking epicmodel_steplist steplist ──────────────────────────────────────── #> ✔ Checking WHAT IDs was successful. #> ✔ Checking DOES IDs was successful. #> ✔ Checking WHERE IDs was successful. #> ✔ Checking Module IDs was successful. #> ✔ Checking ICC IDs was successful. #> ✔ Checking WHAT keywords was successful. #> ✔ Checking DOES keywords was successful. #> ✔ Checking WHERE keywords was successful. #> ✔ Checking Module keywords was successful. #> ✔ Checking Modules was successful. #> ✔ Checking ICC entries was successful. #> ✔ Checking WHAT segments was successful. #> ✔ Checking DOES segments was successful. #> ✔ Checking WHERE segments was successful. #> ✔ Checking references was successful. #> ✔ Checking start/end steps was successful. #> ✔ Checking THEN statements was successful. #> ✔ Checking THEN/IF/IFNOT equality was successful. #> ✔ Checking outcome definitions was successful. #> ── Summary ───────────────────────────────────────────────────────────────────── #> ✔ Checking successful! print(steplist_checked) #> ✔ checked successfully #> WHAT:  7  WHAT segments #> DOES:  6  DOES segments #> WHERE:  3  WHERE segments #> MODULE:  3  modules #> STEP:  10  STEPs #> ICC:  0  incompatible component-cause pairs #> OUTCOME:  1  outcome definition summary(steplist_checked) #>  #> ── Outcome Definitions ── #>  #> • you get wet #>  #> ── Component causes ── #>  #> • no vacation #> • weekday #> • rain #> • get groceries #>  #> ── Interventions ── #>  #> • take vacation #> • take umbrella #> • work from home #>  #> ── End steps ── #>  #> • you get wet #>  #> ── Other steps ── #>  #> • walk to work #> • go outside plot(steplist_checked) #>    Label   Module           Step #> 1    CC1 activity    no vacation #> 2    CC2     fate        weekday #> 3    CC3  weather           rain #> 4    CC4 activity  get groceries #> 5     I1 activity  take vacation #> 6     I2 activity  take umbrella #> 7     I3 activity work from home #> 8     S1 activity   walk to work #> 9     S2 activity     go outside #> 10    E1  weather    you get wet"},{"path":"https://forsterepi.github.io/epicmodel/articles/epicmodel.html","id":"step-2-create-scc-model-from-steplist","dir":"Articles","previous_headings":"","what":"Step 2: Create SCC model from steplist","title":"epicmodel","text":"first, need actually create SCC model. done function create_scc(). See function documentation learn applied algorithm. single input: checked steplist. steplist small, SCC model creation fast. However, realistic steplists, create_scc() can take time evaluates every possible combination component causes. output see 15 sets component causes checked. running summary(steplist_checked) , saw 4 component causes. every one can present absent, 2 ^ 4 = 16 combinations. course, ’s need evaluate set component causes absent, leaves us 15 combinations. can see 5 15 combinations sufficient, .e., fulfilled outcome definition. ignore “Check sufficiency depends IFNOT conditions” introduction, can learn vignette(\"scc\"). Finally, see 2 5 sufficient causes minimal. set component causes form sufficient cause, needs minimally sufficient, .e., remove component causes, remaining ones sufficient . example, see shortly component causes “rain” “get groceries” sufficient “get wet”. raining go outside get groceries, get wet. Therefore, minimally sufficient. add another component cause, e.g., ’s “weekday”, set, course still lead outcome minimally sufficient anymore. Now, let’s inspect SCC model using print() summary(), identical SCC models. output, first reminded outcome definition sufficient causes (SC) listed. saw , two : SC 1 & SC 2. sufficient causes reported “Always sufficient”. refers sufficiency status. Due structure steplists, possible sets component causes sufficient, .e., lead outcome, specific circumstances. learn , see vignette(\"scc\"). , however, case . Based steplist, sets component causes, .e. “rain” & “get groceries”, well “vacation” & “weekday” & “rain” always sufficient cause outcome “get wet”. Modules also make appearance . , see vignette(\"modules\") learn .","code":"scc_model <- create_scc(steplist_checked) #>  #> ── Create SCC Model ── #>  #> ✔ 15/15 | Check if set of component causes is sufficient #> ✔ 5/5 | Check if sufficiency dependends on IFNOT conditions #> ✔ 5/5 | Check if sufficient cause is minimal #> ℹ 2/5 sufficient causes are minimal print(scc_model) #>  #> ── Outcome Definitions ── #>  #> • you get wet #>  #> ── SC 1 ── #>  #> ✔ Always sufficient #> Component causes: #> • rain #> • get groceries #>  #> Modules #> • activity: 50% (2/4) #> • weather: 50% (2/4) #>  #> ── SC 2 ── #>  #> ✔ Always sufficient #> Component causes: #> • no vacation #> • weekday #> • rain #>  #> Modules #> • activity: 50% (3/6) #> • weather: 33% (2/6) #> • fate: 17% (1/6) #>"},{"path":"https://forsterepi.github.io/epicmodel/articles/epicmodel.html","id":"step-3-use-scc-model","dir":"Articles","previous_headings":"","what":"Step 3: Use SCC model","title":"epicmodel","text":"Learning sufficient causes interesting, can lot SCC model.","code":""},{"path":"https://forsterepi.github.io/epicmodel/articles/epicmodel.html","id":"causal-pies","dir":"Articles","previous_headings":"Step 3: Use SCC model","what":"Causal pies","title":"epicmodel","text":"First, course, want see causal pies, can simple use plot(). ’ll notice additionally specified unknown = FALSE. argument controls unknown causes included plot. learn unknown causes, see vignette(\"scc\").","code":"plot(scc_model, unknown = FALSE)"},{"path":"https://forsterepi.github.io/epicmodel/articles/epicmodel.html","id":"standardized-effect-size","dir":"Articles","previous_headings":"Step 3: Use SCC model","what":"Standardized effect size","title":"epicmodel","text":"epidemiology, usually calculate risk ratios odds ratios estimate strength effect exposure outcome. learn SCC models, however, effect sizes natural constants value depends population study. epicmodel offers function derive standardized effect estimate SCC model. Let’s look output explore works. output, see epicmodel calculates value component cause. , lists possible sets component causes (16 already calculated), splits half component cause interest present half component cause interest absent, records sets cause outcome half. Let’s look, e.g., square brackets [] “get groceries”: first part records sets “get groceries” present 4 8 lead outcome. second part records sets without “get groceries” 1 8 leads outcome. number front simply ratio two fractions. can see standardized effect size “get groceries” 4.00 higher “vacation” “weekday” 1.50, makes sense “get groceries” needs “rain” sufficient, “vacation” “weekday” need “rain” well . “rain” marked necessary cause none 8 sets component causes include “rain” lead outcome occurrence.","code":"effect_size(scc_model) #> ✔ 4/4 | Check impact of every component cause #>                        Component Cause                  Impact #> 1                                 rain necessary [5/8 vs. 0/8] #> 2                        get groceries      4.00 [4/8 vs. 1/8] #> 3 IFNOT take vacation THEN no vacation      1.50 [3/8 vs. 2/8] #> 4                              weekday      1.50 [3/8 vs. 2/8]"},{"path":"https://forsterepi.github.io/epicmodel/articles/epicmodel.html","id":"mechanisms","dir":"Articles","previous_headings":"Step 3: Use SCC model","what":"Mechanisms","title":"epicmodel","text":"printing SCC model, saw “vacation”, “weekday”, “rain” together formed sufficient cause. Maybe wondered, three cause “get wet”? can explore inspecting mechanisms. already saw complete one plotting steplist. Using mechanism(), can split sufficient cause. Using plot(), produces one graph every sufficient cause. using print() provides us legend already know earlier. Graphs can downloaded export_mechanism().","code":"mech <- mechanism(scc_model) print(mech) plot(mech) #>  Label Module   Step           #>  CC1   activity no vacation    #>  CC2   fate     weekday        #>  CC3   weather  rain           #>  CC4   activity get groceries  #>  I1    activity take vacation  #>  I2    activity take umbrella  #>  I3    activity work from home #>  S1    activity walk to work   #>  S2    activity go outside     #>  E1    weather  you get wet"},{"path":"https://forsterepi.github.io/epicmodel/articles/epicmodel.html","id":"interventions","dir":"Articles","previous_headings":"Step 3: Use SCC model","what":"Interventions","title":"epicmodel","text":"Let’s take another look steplist summary: can see three steps listed interventions, “take vacation”, “take umbrella”, “work home”. now, don’t need now, interventions defined exactly (, see vignette(\"steplist\") details), names can see actions might prevent outcome. epicmodel can investigate impact based SCC model. general, two directions investigation can take: sufficient causes can prevented given intervention? intervention prevents outcome individual given set component causes? Let’s investigate first, sufficient causes can prevented intervention “work home”. specify \"\" argument causes \"THENd4e1\", .e., step ID intervention “work home”, argument intervention. output, get comparison status without intervention sufficient cause. Cause Set 1, reported “considered intervention able prevent outcome”, Cause Set 2, complete prevention intervention set “work home”. Now, let’s imagine following situation: ’s raining, ’s weekday, vacation, want get groceries, .e., c(\"THENa1\",\"THENa5\",\"THENd2a3\") step IDs. Since open suggestions, let’s specify \"\" argument intervention. Surprise, can completely prevent getting wet taking umbrella! Please note epicmodel reports minimal intervention sets. , e.g., additionally work home (even though doesn’t really make sense example) still prevent getting wet. However, need take umbrella. better example, consider following situation: ’s raining, ’s weekday, don’t vacation, don’t umbrella. can look scenario : output shows , prevent outcome, can either work home take vacation. together work well, course, , intervention set minimal.","code":"summary(steplist_checked) #>  #> ── Outcome Definitions ── #>  #> • you get wet #>  #> ── Component causes ── #>  #> • no vacation #> • weekday #> • rain #> • get groceries #>  #> ── Interventions ── #>  #> • take vacation #> • take umbrella #> • work from home #>  #> ── End steps ── #>  #> • you get wet #>  #> ── Other steps ── #>  #> • walk to work #> • go outside intervene(scc_model, causes = \"all\", intervention = \"THENd4e1\") #>  #> ── Intervention ──────────────────────────────────────────────────────────────── #>  #> ── Cause Set 1 ── #>  #> • rain #> • get groceries #> Status without intervention #> ✔ Always sufficient #> Status with intervention #> ✖ No considered intervention is able to prevent the outcome #>  #> ── Cause Set 2 ── #>  #> • no vacation #> • weekday #> • rain #> Status without intervention #> ✔ Always sufficient #> Status with intervention #> ✔ Complete prevention by the following minimal intervention sets #>  #> ── Intervention Set 1 #> • work from home intervene(scc_model, causes = c(\"THENa1\",\"THENa5\",\"THENd2a3\"), intervention = \"all\") #>  #> ── Intervention ──────────────────────────────────────────────────────────────── #>  #> ── Cause Set 1 ── #>  #> • weekday #> • rain #> • get groceries #> Status without intervention #> ✔ Always sufficient #> Status with intervention #> ✔ Complete prevention by the following minimal intervention sets #>  #> ── Intervention Set 1 #> • take umbrella intervene(scc_model, causes = c(\"IFNOTd6a6THENd5a6\",\"THENa5\",\"THENa1\"), intervention = c(\"THENd6a6\",\"THENd4e1\")) #>  #> ── Intervention ──────────────────────────────────────────────────────────────── #>  #> ── Cause Set 1 ── #>  #> • no vacation #> • weekday #> • rain #> Status without intervention #> ✔ Always sufficient #> Status with intervention #> ✔ Complete prevention by the following minimal intervention sets #>  #> ── Intervention Set 1 #> • work from home #>  #> ── Intervention Set 2 #> • take vacation"},{"path":"https://forsterepi.github.io/epicmodel/articles/epicmodel.html","id":"dags","dir":"Articles","previous_headings":"Step 3: Use SCC model","what":"DAGs","title":"epicmodel","text":"Finally, epicmodel can transform SCC models directed acyclic graphs (DAGs) following VanderWeele & Robins (2007). Element dag output contains dagitty object thanks dagitty package. Printing prints dagitty model code, , e.g., can pasted DAGitty online www.dagitty.net processing. can also plot dagitty objects epicmodel’s plot_dag() function, tries mimic DAGitty’s online layout ggplot object.","code":"dag <- scc_to_dag(scc_model) dag$dag #> dag { #> CC1 [pos=\"1.000,0.250\"] #> CC2 [pos=\"1.000,0.750\"] #> CC3 [pos=\"1.000,1.250\"] #> CC4 [pos=\"1.000,1.750\"] #> O [outcome,pos=\"4.000,1.000\"] #> SC1 [pos=\"3.000,0.000\"] #> SC2 [pos=\"3.000,1.000\"] #> USC [pos=\"3.000,2.000\"] #> U_SC1 [pos=\"2.000,0.000\"] #> U_SC2 [pos=\"2.000,1.000\"] #> U_USC [pos=\"2.000,2.000\"] #> CC1 -> SC1 #> CC1 -> SC2 #> CC2 -> SC1 #> CC3 -> SC2 #> CC4 -> SC2 #> SC1 -> O #> SC2 -> O #> USC -> O #> U_SC1 -> SC1 #> U_SC2 -> SC2 #> U_USC -> USC #> } plot_dag(dag$dag)"},{"path":"https://forsterepi.github.io/epicmodel/articles/epicmodel.html","id":"references","dir":"Articles","previous_headings":"Step 3: Use SCC model","what":"References","title":"epicmodel","text":"Rothman KJ (1976): Causes. American Journal Epidemiology 104(6):587-592. VanderWeele TJ, Robins JM (2007): Directed acyclic graphs, sufficient causes, properties conditioning common effect. American Journal Epidemiology 166 (9): 1096–1104.","code":""},{"path":"https://forsterepi.github.io/epicmodel/articles/modules.html","id":"define-modules","dir":"Articles","previous_headings":"","what":"Define modules","title":"Modules","text":"Modules defined steplist creation. don’t use modules, , every step part exactly one module. steplist checking, leads error steps assigned module. quick removal modules, use remove_all_modules(). SCC model created, information, modules used , saved element sc_use_modules epicmodel_scc class objects.","code":""},{"path":"https://forsterepi.github.io/epicmodel/articles/modules.html","id":"plot-steplist","dir":"Articles","previous_headings":"","what":"Plot steplist","title":"Modules","text":"successful checking, steplists can plotted see steps chained together. default, modules used, nodes graph colored according module steps module color. Use arguments modules module_colors turn coloring change colors, respectively.","code":""},{"path":"https://forsterepi.github.io/epicmodel/articles/modules.html","id":"mechanisms","dir":"Articles","previous_headings":"","what":"Mechanisms","title":"Modules","text":"Since mechanisms steplist plotting works similarly, mechanism() offers arguments modules module_colors well work similarly plot.epicmodel_steplist_checked().","code":""},{"path":"https://forsterepi.github.io/epicmodel/articles/modules.html","id":"scc-model-summary","dir":"Articles","previous_headings":"","what":"SCC model summary","title":"Modules","text":"printing SCC model uses modules, output also reports many steps sufficient cause-specific mechanism belong module. Let’s look built-steplist_party example. First, load steplist, make adjustments cause steplist checking fail, finally run check_steplist(). Next, create SCC model checked steplist print model. output, can see , e.g., sufficient cause 1 (SC 1) includes 10 steps minimally sufficient mechanism component causes outcome interest, 4 assigned module “guests”, 4 assigned module “orga”, 2 assigned module “food”.","code":"steplist_checked <- steplist_party %>% remove_na() %>% remove_segment(\"d4\") %>% check_steplist() scc_model <- steplist_checked %>% create_scc() scc_model #>  #> ── Outcome Definitions ── #>  #> • Emma is coming and food is fine and Laura is coming and weather is fine #>  #> ── SC 1 ── #>  #> ✔ Always sufficient #> Component causes: #> • Emma is invited #> • Laura is invited #> • Birthday party takes place on a weekday #> • Birthday party takes place at a karaoke bar #>  #> Modules #> • guests: 40% (4/10) #> • orga: 40% (4/10) #> • food: 20% (2/10) #>  #> ── SC 2 ── #>  #> ✔ Always sufficient #> Component causes: #> • Ana is invited #> • Emma is invited #> • Laura is invited #> • Birthday party takes place at a restaurant #>  #> Modules #> • guests: 60% (6/10) #> • orga: 30% (3/10) #> • food: 10% (1/10) #>  #> ── SC 3 ── #>  #> ! Sufficiency depends on order of occurrence #> Component causes: #> • Ana is invited #> • Emma is invited #> • Laura is invited #> • Birthday party takes place on a weekday #> • No rain #> • Birthday party takes place at the beach #>  #> Sufficient orders of occurrence: #> • Ana is invited -> birthday party takes place on a weekday #>  #> Modules #> • guests: 46% (6/13) #> • orga: 38% (5/13) #> • food: 15% (2/13) #>"},{"path":"https://forsterepi.github.io/epicmodel/articles/scc.html","id":"why-scc","dir":"Articles","previous_headings":"","what":"Why SCC?","title":"SCC Models","text":"going specific topics, worth clarifying purpose SCC model actually . previously described, causal modeling framework, .e., specific structure approach causal modeling, .e., specifying structuring causal assumptions. learned Pearl (2009; pp. 38-40), causal inference possible based causal assumptions , therefore, causal inference methods need include causal modeling. different causal modeling frameworks available, e.g., causal graphs form directed acyclic graphs (DAG). Different frameworks usually different perspectives can complement . SCC models describe single outcome interest, (known suspected) causes, makes outcome-focused approach. SCC framework models idea effect multiple causes certain combinations causes lead outcome. individual causes called “component causes”, emphasizing multiple causes necessary outcome occur. combinations component causes can lead outcome interest called “sufficient causes”, emphasizing sets enough cause outcome. main modeling task grouping component causes together form sufficient causes. SCC models add important perspective causal modeling therefore causal inference. , example, quote article Rerknimitr et al. (2017) talking atopic dermatitis (AD) filaggrin (FLG): Although null mutation FLG gene poses strongest risk AD, 60% individuals carry gene AD symptoms (Irvine et al. 2011). contrary, significant portion AD patients FLG mutation (Irvine et al. 2011). thus evident additional factors needed develop disease. SCC lens, case seems obvious: Null mutations FLG gene seem component cause atopic dermatitis, part every sufficient cause. intuitive understanding SCC structure seems especially useful investigating effect interventions. certain intervention might beneficial certain sufficient causes, .e., certain group affected individuals, useless others. Without considering possibility, effect beneficial interventions might easily missed. purpose SCC models therefore extend causal modeling practices SCC perspective, emphasizes two main points: single cause component causal mechanism. outcome occur, complementary component causes needed. multiple mechanisms can lead outcome occurrence. single cause usually part mechanisms. task SCC model creation can therefore rephrased task finding smallest sets component causes sufficient outcome occurrence, “smallest” meaning , within sufficient set, every single component cause necessary. epicmodel, smallest sets sometimes explicitly called minimally sufficient, even though sufficiency implies “minimality” definition.","code":""},{"path":"https://forsterepi.github.io/epicmodel/articles/scc.html","id":"how-can-scc-models-be-used","dir":"Articles","previous_headings":"","what":"How can SCC models be used?","title":"SCC Models","text":"functionalities available epicmodel show SCC models might used practice. mentioned , SCC models outcome-focused theory need include causes outcome. creation therefore time-consuming, created, easily re-usable. epicmodel built assumption know enough many health outcomes create useful SCC models. useful SCC model might able fulfill following tasks: Increase understanding modeled health outcome grouping component causes sufficient causes Generate hypotheses effect interventions Form backbone complex epidemiological causal models translating SCC model DAG","code":""},{"path":"https://forsterepi.github.io/epicmodel/articles/scc.html","id":"algorithm-for-scc-model-creation","dir":"Articles","previous_headings":"","what":"Algorithm for SCC model creation","title":"SCC Models","text":"First, let’s briefly talk algorithm SCC model creation. details described function documentation create_scc(). basic steps: Derive list valid combinations component causes Check valid combinations component causes sufficiency (point, IFNOT conditions ignored) Check IFNOT conditions influence sufficiency Reduce list sufficient causes minimally sufficient causes Add unknown causes","code":""},{"path":"https://forsterepi.github.io/epicmodel/articles/scc.html","id":"ifnot-conditions-sufficiency-status-and-the-concept-of-time","dir":"Articles","previous_headings":"","what":"IFNOT conditions, sufficiency status, and the concept of time","title":"SCC Models","text":"talking induction period SCC models, Rothman et al. (2008; pp. 15-16) write: way tell pie-chart diagram sufficient cause components affect , components must come others, components temporal order irrelevant, etc. crucial information temporal ordering must come separate description interrelations among components sufficient cause. interrelations among component causes available steplist, steps based mechanisms outcome occurrence, predefines temporal ordering, .e., condition step always occurs corresponding statement. IFNOT conditions, however, necessarily case. IFNOT condition fulfilled condition. Importantly, temporal order IFNOT makes difference. implicit assumption instantly leads , two possible orders occurrence steps IFNOT conditions fulfilled: -> -> IFNOT: therefore occur IFNOT fulfilled. Therefore, even IFNOT fulfilled, prevent . IFNOT -> : IFNOT occurs therefore IFNOT prevents happening, even though fulfilled. Importantly, steplist contain information two orders occurrence realistic possible. Therefore, algorithm SCC model creation makes sure possible temporal orders investigated. reason, algorithm starts ignoring IFNOT. worth mentioning, implicitly assumed , step occurred, stays end, e.g., step “Cell produces cytokine B cytokine B present” occurred, cytokine B present end. assumption unrealistic, IFNOT condition needs added: “Cell produces cytokine B IFNOT factor C removes cytokine B cytokine B present”. quote, Rothman et al. speak separate description crucial information temporal ordering addition pie-chart diagram. epicmodel, separate description takes form sufficiency status. sufficiency status describes every sufficient cause, always sufficient sufficiency depends order occurrence elements. See also ?epicmodel_scc information. Let’s look built-steplist_party example. describes situation friend Clara wondering circumstances birthday party success. Let’s first load steplist, check (adjustments), create SCC model. output, sufficiency status displayed first element sufficient cause (SC). SC1 SC2, status “Always sufficient”. status SC3, however, reported “Sufficiency depends order occurrence”. reason mechanism SC3 contains following step: Ana invited IFNOT birthday party takes place weekday Ana coming. can see list component causes output IFNOT fulfilled SC3. Therefore, algorithm checks, orders occurrence sufficient outcome occurrence . case, two options: Ana invited -> birthday party takes place weekday birthday party takes place weekday -> Ana invited output, list component causes, sufficient orders occurrence listed. option 1 sufficient, “Ana invited” condition must occur IFNOT condition “birthday party takes place weekday”. probably noticed example, orders occurrence make much sense. Even Ana invited host decides party takes place weekday, still wouldn’t go. problem occurs aforementioned assumption instantly leads violated. Therefore, user need evaluate orders occurrence plausible . epicmodel able notice implausibilities report presence output sufficiency status. However, even case always possible orders occurrence evaluated reported user needs discard implausible ones. birthday party example, need discard sufficient order occurrence, means SC3 actually sufficient cause! creating causal pies, can address issue specifying remove_sc argument plot().","code":"steplist_checked <- steplist_party %>% remove_na() %>% remove_segment(\"d4\") %>% check_steplist() scc_model <- steplist_checked %>% create_scc() scc_model #>  #> ── Outcome Definitions ── #>  #> • Emma is coming and food is fine and Laura is coming and weather is fine #>  #> ── SC 1 ── #>  #> ✔ Always sufficient #> Component causes: #> • Emma is invited #> • Laura is invited #> • Birthday party takes place on a weekday #> • Birthday party takes place at a karaoke bar #>  #> Modules #> • guests: 40% (4/10) #> • orga: 40% (4/10) #> • food: 20% (2/10) #>  #> ── SC 2 ── #>  #> ✔ Always sufficient #> Component causes: #> • Ana is invited #> • Emma is invited #> • Laura is invited #> • Birthday party takes place at a restaurant #>  #> Modules #> • guests: 60% (6/10) #> • orga: 30% (3/10) #> • food: 10% (1/10) #>  #> ── SC 3 ── #>  #> ! Sufficiency depends on order of occurrence #> Component causes: #> • Ana is invited #> • Emma is invited #> • Laura is invited #> • Birthday party takes place on a weekday #> • No rain #> • Birthday party takes place at the beach #>  #> Sufficient orders of occurrence: #> • Ana is invited -> birthday party takes place on a weekday #>  #> Modules #> • guests: 46% (6/13) #> • orga: 38% (5/13) #> • food: 15% (2/13) #> plot(scc_party, remove_sc = 3)"},{"path":"https://forsterepi.github.io/epicmodel/articles/scc.html","id":"unknown-causes","dir":"Articles","previous_headings":"","what":"Unknown causes","title":"SCC Models","text":"final step aforementioned algorithm called “Add unknown causes”. described , SCC model must, theory, contain causes, component causes well sufficient causes, outcome interest. practice, knowing causes course unrealistic. create_scc() therefore adds unknown causes placeholders. Two types unknown causes added (see also ?epicmodel_scc): Unknown component cause: One additional component cause added every sufficient cause represent set unknown component causes. Every sufficient cause gets unique unknown component cause. Unknown sufficient cause: One additional sufficient cause single component cause added represent unknown sufficient causes. can decide include unknown causes relevant functions setting unknown = FALSE, example plotting causal pies plot().","code":""},{"path":"https://forsterepi.github.io/epicmodel/articles/scc.html","id":"other-functions-for-scc-models","dir":"Articles","previous_headings":"","what":"Other functions for SCC models","title":"SCC Models","text":"epicmodel offers additional functions inspect SCC models created create_scc(). functions use process SCC models, see “Get started” (.e., vignette(\"epicmodel\")).","code":""},{"path":"https://forsterepi.github.io/epicmodel/articles/scc.html","id":"print-all-step-ids-and-descriptions","dir":"Articles","previous_headings":"Other functions for SCC models","what":"Print all step IDs and descriptions","title":"SCC Models","text":"Use show_steps() print step IDs descriptions console.","code":"show_steps(scc_model) #> • THENa5d1: Start: Ana is invited #> • THENa4d1: Start: Emma is invited #> • THENa6d1: Start: Laura is invited #> • THENa7d3e3: Start: Birthday party takes place on a weekday #> • IFa5d1IFNOTa7d3e3THENa5d5: IF Ana is invited and IFNOT birthday party takes #> place on a weekday THEN Ana is coming #> • THENa3: Start: No rain #> • THENa7d3e4: Start: Birthday party takes place at a restaurant #> • THENa7d3e5: Start: Birthday party takes place at a karaoke bar #> • IF(a7d3e2)or(a7d3e1+a3)THENa2d6: End: IF birthday party takes place inside or #> (birthday party takes place outside and no rain) THEN weather is fine #> • IF(a7d3e5)or(a7d3e4)THENa7d3e2: IF birthday party takes place at a karaoke #> bar or birthday party takes place at a restaurant THEN birthday party takes #> place inside #> • THENa7d3e6: Start: Birthday party takes place at the beach #> • IFa7d3e6THENa7d3e1: IF birthday party takes place at the beach THEN birthday #> party takes place outside #> • IFa6d1THENa6d5: End: IF Laura is invited THEN Laura is coming #> • IF(a4d1+a5d5)or(a4d1+a7d3e5)THENa4d5: End: IF (Emma is invited and Ana is #> coming) or (Emma is invited and birthday party takes place at a karaoke bar) #> THEN Emma is coming #> • IFa7d3e3THENa8d2a1: IF birthday party takes place on a weekday THEN Clara, #> the host, brings birthday cake #> • IF(a7d3e4)or(a8d2a1)THENa9d6: End: IF birthday party takes place at a #> restaurant or Clara, the host, brings birthday cake THEN food is fine"},{"path":"https://forsterepi.github.io/epicmodel/articles/scc.html","id":"inspect-if-sufficient-causes-contain-certain-steps","dir":"Articles","previous_headings":"Other functions for SCC models","what":"Inspect if sufficient causes contain certain steps","title":"SCC Models","text":"printing SCC models, reported, component causes part sufficient causes. However, sometimes might want know step part mechanism links component causes outcome sufficient causes. Use sc_contain_steps() get answer. talking sufficiency status , interested step Ana invited IFNOT birthday party takes place weekday Ana coming. let’s double-check actually part sufficient cause 3. corresponding step ID, see show_steps() IFa5d1IFNOTa7d3e3THENa5d5. Actually, step part SC2 SC3. makes complete sense , contrast SC1, Ana invited times therefore condition fulfilled. SC3 status “Sufficiency depends order occurrence” IFNOT condition fulfilled SC3 SC2.","code":"scc_model %>% sc_contain_steps(\"IFa5d1IFNOTa7d3e3THENa5d5\") #>  #> ── SC 1 ── #>  #> Component causes: #> • Emma is invited #> • Laura is invited #> • Birthday party takes place on a weekday #> • Birthday party takes place at a karaoke bar #>  #> ✖ SC1 does not contain step 'IF Ana is invited and IFNOT birthday party takes place on a weekday THEN Ana is coming' (IFa5d1IFNOTa7d3e3THENa5d5) #>  #> ── SC 2 ── #>  #> Component causes: #> • Ana is invited #> • Emma is invited #> • Laura is invited #> • Birthday party takes place at a restaurant #>  #> ✔ SC2 contains step 'IF Ana is invited and IFNOT birthday party takes place on a weekday THEN Ana is coming' (IFa5d1IFNOTa7d3e3THENa5d5) #>  #> ── SC 3 ── #>  #> Component causes: #> • Ana is invited #> • Emma is invited #> • Laura is invited #> • Birthday party takes place on a weekday #> • No rain #> • Birthday party takes place at the beach #>  #> ✔ SC3 contains step 'IF Ana is invited and IFNOT birthday party takes place on a weekday THEN Ana is coming' (IFa5d1IFNOTa7d3e3THENa5d5)"},{"path":"https://forsterepi.github.io/epicmodel/articles/scc.html","id":"get-component-causes-as-list","dir":"Articles","previous_headings":"Other functions for SCC models","what":"Get component causes as list","title":"SCC Models","text":"want retrieve sets component causes form sufficient causes list vectors, can use scc_cause_sets(). can retrieve step IDs well descriptions.","code":"scc_model %>% scc_cause_sets(output = \"desc\") #> $cc90 #> [1] \"Start: Emma is invited\"                             #> [2] \"Start: Laura is invited\"                            #> [3] \"Start: Birthday party takes place on a weekday\"     #> [4] \"Start: Birthday party takes place at a karaoke bar\" #>  #> $cc103 #> [1] \"Start: Ana is invited\"                             #> [2] \"Start: Emma is invited\"                            #> [3] \"Start: Laura is invited\"                           #> [4] \"Start: Birthday party takes place at a restaurant\" #>  #> $cc125 #> [1] \"Start: Ana is invited\"                          #> [2] \"Start: Emma is invited\"                         #> [3] \"Start: Laura is invited\"                        #> [4] \"Start: Birthday party takes place on a weekday\" #> [5] \"Start: No rain\"                                 #> [6] \"Start: Birthday party takes place at the beach\""},{"path":"https://forsterepi.github.io/epicmodel/articles/scc.html","id":"check-sufficiency-for-a-set-of-component-causes","dir":"Articles","previous_headings":"Other functions for SCC models","what":"Check sufficiency for a set of component causes","title":"SCC Models","text":"Finally, are_sufficient() can check given SCC model certain set component causes lead outcome interest, .e., sufficient cause fulfilled provided set. two types output: type = \"binary\", returns TRUE FALSE, type = \"status\" returns one “always”, “depends”, “never”, depending sufficiency status fulfilled sufficient causes. (Without specifying causes, function prints list available ones console.)","code":"scc_model %>% are_sufficient(c(\"THENa5d1\",\"THENa4d1\",\"THENa6d1\",\"THENa7d3e4\"), type = \"status\") #> [1] \"always\" scc_model %>% are_sufficient(c(\"THENa5d1\",\"THENa4d1\",\"THENa6d1\",\"THENa7d3e4\"), type = \"binary\") #> [1] TRUE"},{"path":"https://forsterepi.github.io/epicmodel/articles/scc.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"SCC Models","text":"Irvine AD, McLean WHI, Leung DYM (2011): Filaggrin mutations associated skin allergic diseases. New England Journal Medicine 365(14):1315-1327. Pearl J (2009): Causality: Models, reasoning, inference. Cambridge: Univ. Press. Rerknimitr P, Otsuka , Nakashima C, Kabashima K (2017): etiopathogenesis atopic dermatitis: barrier disruption, immunological derangement, pruritus. Inflammation Regeneration 37:14. Rothman KJ (1976): Causes. American Journal Epidemiology 104(6):587-592. Rothman KJ, Greenland S, Poole C, Lash TL (2008): Causation Causal Inference. : Rothman KJ, Greenland S, Lash TL (Ed.): Modern epidemiology. Third edition. Philadelphia, Baltimore, New York: Wolters Kluwer Health Lippincott Williams & Wilkins, pp. 5–31.","code":""},{"path":"https://forsterepi.github.io/epicmodel/articles/steplist.html","id":"input-for-scc-model-creation","dir":"Articles","previous_headings":"","what":"Input for SCC model creation","title":"Steplists","text":"Sufficient-component cause (SCC) models consist component causes, grouped sufficient causes. Sufficient causes minimally sufficient outcome interest occur, .e., one component causes included missing, outcome occur (least via sufficient cause). main modeling task creating SCC models therefore specify, component causes belong sufficient cause. Since SCC models causal models, specifications need based knowledge regarding mechanisms outcome occurrence statistical knowledge, .e., based mechanisms outcome occurrence needs specified component causes connected outcome. sufficient causes minimally sufficient, necessary also describe minimally sufficient mechanisms connect . reason, complex net mechanisms leading outcome occurrence needs split small parts. small parts called steps epicmodel. Component causes linked outcome interest chaining steps together.","code":""},{"path":"https://forsterepi.github.io/epicmodel/articles/steplist.html","id":"step-structure","dir":"Articles","previous_headings":"","what":"Step structure","title":"Steplists","text":"Steps pre-defined structure facilitate chaining. developed structure tries strike balance flexible user-friendly step specification automated SCC model creation. structure used epicmodel basically -structure. Steps consists 3 parts: condition IFNOT condition statement","code":""},{"path":"https://forsterepi.github.io/epicmodel/articles/steplist.html","id":"then-statements","dir":"Articles","previous_headings":"Step structure","what":"THEN statements","title":"Steplists","text":"statements core building block steps. describe happens, e.g., Cell releases cytokine B, Exposure C, D moves E, etc. order facilitate chaining steps, statements also follow pre-defined structure. makes possible automatically create ID description statements. IDs used chaining. steps built statements, structure also enables automated creation step IDs descriptions. statements contain 4 segments: segment (Subject) segment segment statement (Object) segment statements follow structure therefore generally consist , , segments. segments can appear twice: first called “subject”, second called “object”. can see examples fit structure: Cell releases cytokine B : Cell : releases : cytokine B : - Exposure C : - : Exposure : C : - D moves E : D : moves : - : E segments require object statement instead segment. Image, e.g., segment “inhibition”. general, inhibition can modeled specifying IFNOT conditions (see ). However, inhibition occurs certain condition, might need specified step. Since certain process, .e., specific step inhibited, object cases needs exact step. might segments, objects necessary. option use objects offers flexibility model mechanisms found Nature within structure. Note certain segment either objects steps. Please also note objects can “stacked” including object statement already object. general, object far prevalent though. (’s generally refer structure structure.) statement can contain 4 segments, . general, combinations segments possible , modeler, need decide model process interest. structure supposed facilitate automation naming SCC creation, also grant much flexibility needed model necessary processes. Remember goal connect component causes outcome interest order enable grouping component causes sufficient causes. structure designed goal mind. far, projects, able model processes within structure, encounter something model, let us know GitHub adjust structure accordingly. Please also note , although segment combinations possible general, , , -, experience, make much sense.","code":""},{"path":"https://forsterepi.github.io/epicmodel/articles/steplist.html","id":"if-and-ifnot-conditions","dir":"Articles","previous_headings":"Step structure","what":"IF and IFNOT conditions","title":"Steplists","text":"IFNOT describe conditions statement occur. condition must fulfilled order statement occur. IFNOT condition must fulfilled order statement occur. IFNOT combination statements combined /logic. using statements IFNOT conditions, individual step can chained together. creating step, specification statement mandatory IFNOT conditions optional. IFNOT missing statement available, pre-condition statement “just happens”. Therefore, type steps “starting steps” description begins Start:. form start chains connect component causes outcome interest. context, “starting steps” usually represent component causes. reality, component causes , course, caused factors otherwise involved causing outcome, e.g., occupational exposure causes occupational asthma caused socio-economic factors influence job choice. context SCC model creation task group component causes sufficient causes, component causes starting point therefore represented steps without condition. However, please note component causes can IFNOT conditions. step descriptions built-steplist steplist_rain example: Start: IFNOT take vacation vacation Start: weekday Start: rain Start: get groceries Start: take umbrella Start: work home Start: take vacation vacation weekday IFNOT work home walk work get groceries walk work go outside End: go outside rain IFNOT take umbrella get wet","code":""},{"path":"https://forsterepi.github.io/epicmodel/articles/steplist.html","id":"step-types","dir":"Articles","previous_headings":"","what":"Step types","title":"Steplists","text":", mentioned, different types steps play different roles SCC model creation: Based presence condition, define: Starting steps: Steps without condition Non-starting steps: Steps condition Starting steps can also separated two types: Component causes: Starting steps appear conditions steps (maybe additionally IFNOT conditions steps) Interventions: Starting steps appear conditions steps IFNOT conditions steps Therefore, component causes, interventions, non-starting steps mutually exclusive together form complete list steps. addition, define: IFNOT steps: Steps IFNOT condition, including starting steps IFNOT condition End steps: Steps appear outcome definitions","code":""},{"path":"https://forsterepi.github.io/epicmodel/articles/steplist.html","id":"steplist","dir":"Articles","previous_headings":"","what":"Steplist","title":"Steplists","text":"steplist structure contains specified steps. input function create_scc(), creates SCC model. See ?epicmodel_steplist detailed description structure steplists R perspective.","code":""},{"path":"https://forsterepi.github.io/epicmodel/articles/steplist.html","id":"additional-step-attributes","dir":"Articles","previous_headings":"Steplist","what":"Additional step attributes","title":"Steplists","text":"Steps contain additional attributes: Module: Modules groups steps assigned. modules used, every step exactly one module. End step indicator: Indicates certain step part outcome definition Note: Additional notes, e.g., regarding level evidence, etc. Reference: Since model steps based literature, every step least one reference","code":""},{"path":"https://forsterepi.github.io/epicmodel/articles/steplist.html","id":"steplist-elements","dir":"Articles","previous_headings":"Steplist","what":"Steplist elements","title":"Steplists","text":"R, steplists defined S3 class contain 8 data.frames. ’s short overview, also see ?epicmodel_steplist details. : Contains segments : Contains segments : Contains segments : Contains statements Module: Contains list modules Step: Contains list steps ICC: Short incompatible component causes records combinations component causes, appear practice. Sets component causes contain ICCs considered SCC model creation. Outc: Short outcome definition, list conditions outcome assumed occurred. practice, outcome definition consists end steps combined /logic.","code":""},{"path":"https://forsterepi.github.io/epicmodel/articles/steplist.html","id":"steplist-creation","dir":"Articles","previous_headings":"","what":"Steplist creation","title":"Steplists","text":"Steplists created built-Steplist Creator Shiny App. can launched : made little tutorial shows use shiny app, see vignette(\"steplist_creator_tutorial\"). contains screenshots example click along. Please note tutorial shipped package can accessed homepage.","code":"launch_steplist_creator()"},{"path":"https://forsterepi.github.io/epicmodel/articles/steplist.html","id":"processing-steplists-in-r","dir":"Articles","previous_headings":"","what":"Processing steplists in R","title":"Steplists","text":"steplist created shiny app can downloaded .rds file loaded R using readRDS(). Additionally, options process steplist R, might easier standard tasks instead clicking app. functions accompany check_steplist(), let’s talk function first.","code":""},{"path":"https://forsterepi.github.io/epicmodel/articles/steplist.html","id":"checked-and-unchecked-steplists","dir":"Articles","previous_headings":"Processing steplists in R","what":"Checked and unchecked steplists","title":"Steplists","text":"steplist needs fulfill additional structural requirements order used create_scc(). requirements checked check_steplist(). function documentation contains detailed description conducted checks. violation result errors, means checking successful need make changes. violations result warnings, suggest non-mandatory changes. check_steplist() results warnings, still get checked steplist. Let’s look built-steplist_party example. Now, let’s run check_steplist(). can see many checks successful also resulted errors warnings. first error tells “Checking ICC entries failed!”. reminder, ICC short incompatible component causes tells ICC data.frame steplist, used step IDs defined, .e., found data.frame step steplist. gives details: “total, 1 ID data.frame step: NA”. clarifies lot: still entry table contains NA, counted empty element. Luckily, case, offers solution: using remove_na(). Next, warning “segments used data.frame step!” tells us two lines , specified d4 data.frame use creating steps. Even though won’t break SCC model creation, let’s also address . Finally, check_steplist() warns us “steps references provided!”. steps usually based literature, epicmodel get tired telling specify references steplist! summary, checking failed, can verify printing steplist_checked. first line shows us steplist_checked still “unchecked”. , let’s work errors warnings. First, remove NAs data.frame icc, let’s run remove_na(). removes rows consist NAs data.frames icc well outc, contains outcome definition. Next, can delete segment d4 function remove_segment(), allows delete single entry data.frames , , , module, icc specifying ID. time, check_steplist() successful. Since example party, ignore warning references. Printing steplist_checked confirms checking successful. another function available processing steplists R. ’s called remove_all_modules() , name implies, removes modules data.frame module deletes assigned modules data.frame step. epicmodel expects either steps none module specified. remove_all_modules(), easy tool choosing second option. already get warning need repeat check_steplist(). Let’s print steplist_checked investigate. Indeed, see steplist_checked 0 modules now “unchecked” . fact, remove_na() remove_segment() also “uncheck” previously checked steplist. Additionally, steplists download shiny app “unchecked” well, even uploaded “checked” steplist.","code":"steplist <- steplist_party steplist_checked <- check_steplist(steplist) #> ── Checking epicmodel_steplist steplist ────────────────────────────────────────────────────────────────────────────────────────────────────────── #> ✔ Checking WHAT IDs was successful. #> ✔ Checking DOES IDs was successful. #> ✔ Checking WHERE IDs was successful. #> ✔ Checking Module IDs was successful. #> ✔ Checking ICC IDs was successful. #> ✔ Checking WHAT keywords was successful. #> ✔ Checking DOES keywords was successful. #> ✔ Checking WHERE keywords was successful. #> ✔ Checking Module keywords was successful. #> ✔ Checking Modules was successful. #> ✖ Checking ICC entries failed! #> Caused by error in `check_steps_in_icc()`: #> ! All IDs in data.frame `icc`, i.e. in variables `id1` and `id2`, must be in `id_step` of data.frame `step`! #> ℹ Data.frame `icc` contains 4 elements with two step IDs each. #> ✖ In total, 1 ID is not in data.frame `step`: NA #> ℹ If only `NA` is not in data.frame `step`, use `steplist <- remove_na(steplist)`. #> ✔ Checking WHAT segments was successful. #> ! Checking DOES segments resulted in warnings! #> Caused by warning: #> ! Not all DOES segments have been used in data.frame `step`! #> ℹ Data.frame `does` contains 6 elements. #> ℹ In total, 1 DOES segment is not being used in data.frame `step`: d4 #> ✔ Checking WHERE segments was successful. #> ! Checking references resulted in warnings! #> Caused by warning: #> ! For some steps no references have been provided! #> ℹ In total, 16 steps have no references. #> ✔ Checking start/end steps was successful. #> ✔ Checking THEN statements was successful. #> ✔ Checking THEN/IF/IFNOT equality was successful. #> ✔ Checking outcome definitions was successful. #> ── Summary ─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── #> ✖ Checking failed! Please correct errors and repeat. print(steplist_checked) #> ✖ unchecked (please run `check_steplist()` before continuing) #> WHAT:  9  WHAT segments #> DOES:  6  DOES segments #> WHERE:  6  WHERE segments #> MODULE:  3  modules #> STEP:  16  STEPs #> ICC:  4  incompatible component-cause pairs #> OUTCOME:  1  outcome definition steplist <- remove_na(steplist) steplist <- remove_segment(steplist, \"d4\") steplist_checked <- check_steplist(steplist) # ── Checking epicmodel_steplist steplist ─────────────────────────────────────────────────────────────────────────────────────────────────────────── # ✔ Checking WHAT IDs was successful. # ✔ Checking DOES IDs was successful. # ✔ Checking WHERE IDs was successful. # ✔ Checking Module IDs was successful. # ✔ Checking ICC IDs was successful. # ✔ Checking WHAT keywords was successful. # ✔ Checking DOES keywords was successful. # ✔ Checking WHERE keywords was successful. # ✔ Checking Module keywords was successful. # ✔ Checking Modules was successful. # ✔ Checking ICC entries was successful. # ✔ Checking WHAT segments was successful. # ✔ Checking DOES segments was successful. # ✔ Checking WHERE segments was successful. # ! Checking references resulted in warnings! # Caused by warning: # ! For some steps no references have been provided! # ℹ In total, 16 steps have no references. # ✔ Checking start/end steps was successful. # ✔ Checking THEN statements was successful. # ✔ Checking THEN/IF/IFNOT equality was successful. # ✔ Checking outcome definitions was successful. # ── Summary ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── # ✔ Checking successful! print(steplist_checked) #> ✔ checked successfully #> WHAT:  9  WHAT segments #> DOES:  5  DOES segments #> WHERE:  6  WHERE segments #> MODULE:  3  modules #> STEP:  16  STEPs #> ICC:  3  incompatible component-cause pairs #> OUTCOME:  1  outcome definition steplist_checked <- remove_all_modules(steplist_checked) #> ! Changing the steplist makes it necessary to repeat `check_steplist()`! print(steplist_checked) #> ✖ unchecked (please run `check_steplist()` before continuing) #> WHAT:  9  WHAT segments #> DOES:  5  DOES segments #> WHERE:  6  WHERE segments #> MODULE:  0  modules #> STEP:  16  STEPs #> ICC:  3  incompatible component-cause pairs #> OUTCOME:  1  outcome definition"},{"path":"https://forsterepi.github.io/epicmodel/articles/steplist_creator_tutorial.html","id":"launching-the-app","dir":"Articles","previous_headings":"","what":"Launching the app","title":"Steplist Creator Tutorial","text":"First, launch app launch_steplist_creator(). Unfortunately, epicmodel version 0.1.0, app still optimized big screen using laptop might difficult.","code":"launch_steplist_creator()"},{"path":"https://forsterepi.github.io/epicmodel/articles/steplist_creator_tutorial.html","id":"a-first-look-at-the-app","dir":"Articles","previous_headings":"","what":"A first look at the app","title":"Steplist Creator Tutorial","text":"creating steplist, let’s look app first. 8 elements, .e., tabs, menu top. ’s short description: START: Upload download data : Create manage segments : Create manage segments : Create manage segments MODULE: Create manage modules STEP: Create manage steps statements ICC: Define incompatible component causes OUTCOME: Define outcome definitions tabs (apart START) contain basically elements: Input fields: creating new entries, information inputted input fields. Input fields always green background. Action buttons: Buttons adding deleting entries well clearing, .e., returning input fields defaults Table: table contains current entries certain tab. Tables can searched typing search field top right table. Elements table can edited double-clicking corresponding cell. Cells automatically filled edited. cells IDs well descriptions steps segments. Since tables tabs ICC OUTCOME re-use step IDs descriptions, edited .","code":""},{"path":"https://forsterepi.github.io/epicmodel/articles/steplist_creator_tutorial.html","id":"ids","dir":"Articles","previous_headings":"A first look at the app","what":"IDs","title":"Steplist Creator Tutorial","text":"IDs automatically created app follow pre-defined form: (id_what): a1, a2, a3, etc. (id_does): d1, d2, d3, etc. (id_where): e1, e2, e3, etc. MODULE (id_module): m1, m2, m3, etc. ICC (id_icc): i1, i2, i3, etc. (id_then): Combinations segment IDs together form statement following structure, e.g., a1d2e1, d4a67, a2d3a8. objects used, object ID put (), e.g., a1d1(a1d2e1)e1. STEP (id_step): Combinations IDs statements, keys , IFNOT, , well additional characters indicating /logic OUTCOME (id_out): Combinations IDs statements additional characters indicating logic","code":""},{"path":"https://forsterepi.github.io/epicmodel/articles/steplist_creator_tutorial.html","id":"descriptions","dir":"Articles","previous_headings":"A first look at the app","what":"Descriptions","title":"Steplist Creator Tutorial","text":"Descriptions partly provided user partly created automatically. Descriptions tabs , , , MODULE need provided. Descriptions tab STEP created automatically. Automatically created descriptions completely neglect English grammar. Therefore, need provide slightly information. Let’s take detailed look corresponding fields. Keywords (key_what, key_does, key_where, key_module): 4 tabs (, , , MODULE) need keyword. tab STEP, later select 4 tables drop-menus. Keywords descriptors appear drop-menus. provide values long still identifiable. modules, keyword also used output, e.g., printing SCC model. Segment descriptions (desc_what, desc_where): used automatically created descriptions statements steps. plural indicator (plural_what): segments basically verbs sentence therefore change based sentence’s subject. Following structure, subject first segment. Therefore, segments need declare singular plural. app, done via checkbox tab . table, singular translates plural_what == 0 plural translates plural_what == 1. descriptions (subject_singular_does, subject_plural_does, no_subject_does): subject used plural_what == 0, automatically created description uses subject_singular_does. subject used plural_what == 1, automatically created description uses subject_plural_does. subject specified, .e., statement starts segment, no_subject_does used. MODULE description (desc_module): module description offers possibility describe detail, certain modules refer , since keyword needs short. objects (then_object_does): checkbox tab controls segment requires object (unchecked) object (checked). See vignette(\"steplist\") explanation. table, objects translate then_object_does == 0 objects translate then_object_does == 1.","code":""},{"path":"https://forsterepi.github.io/epicmodel/articles/steplist_creator_tutorial.html","id":"additional-step-information","dir":"Articles","previous_headings":"A first look at the app","what":"Additional step information","title":"Steplist Creator Tutorial","text":"look tab STEP detail later example. , however, three non-drop-input fields STEP: End step? (end_step): checkbox checked (end_step == 1), step considered outcome definitions, steps unchecked box (end_step == 0) won’t. Accordingly, steps (end_step == 1) appear drop--menus tab OUTCOME, outcome definitions created. References (ref_step): Space literature references Notes (note_step): Space important information conflicting findings","code":""},{"path":"https://forsterepi.github.io/epicmodel/articles/steplist_creator_tutorial.html","id":"icc-and-outcome","dir":"Articles","previous_headings":"A first look at the app","what":"ICC and OUTCOME","title":"Steplist Creator Tutorial","text":"tabs ICC OUTCOME, steps selected drop-menus. Therefore, columns tables automatically created.","code":""},{"path":"https://forsterepi.github.io/epicmodel/articles/steplist_creator_tutorial.html","id":"example","dir":"Articles","previous_headings":"","what":"Example","title":"Steplist Creator Tutorial","text":"example, let’s create SCC model outcome “student can create SCC models”. start, please note, different ways creating steplist, e.g., different segment names, different use , , , etc.","code":""},{"path":"https://forsterepi.github.io/epicmodel/articles/steplist_creator_tutorial.html","id":"collect-information-on-mechanism","dir":"Articles","previous_headings":"Example","what":"Collect information on mechanism","title":"Steplist Creator Tutorial","text":"launching Steplist Creator Shiny App, already prepared steps based literature, assumptions, etc. example, ’ll introduce assumptions learning SCC models little little make easier follow along. Based knowledge assumptions, student’s ability create SCC models consists two parts. First, need background knowledge SCC models , second, need know create practice. Let’s start background knowledge. Let’s assume know enough theory SCC models one two scenarios: take class SCC models. read essential literature, e.g., Rothman’s 1976 paper Modern Epidemiology (3rd Edition)","code":""},{"path":"https://forsterepi.github.io/epicmodel/articles/steplist_creator_tutorial.html","id":"theory-segments","dir":"Articles","previous_headings":"Example","what":"Theory: Segments","title":"Steplist Creator Tutorial","text":"Now, need put information structure. Remember, don’t specify 4 segments don’t need . Let’s start identifying segments, .e., people, things, concepts, etc.: student class SCC models essential literature Rothman’s 1976 paper Modern Epidemiology (3rd Edition) theory Now, let’s identify segments, basically verbs: take read know don’t need segments now. let’s put segments app. Let’s start segments. basic tasks: Go tab Type new keyword (remember, keywords appear drop-menus) Type new description (remember, descriptions later form actual step descriptions) Select segment singular plural Click Add segment Repeat steps 2-5 every segment suggest following values make adjustments, want : Also, can delete entries table following tasks: Go tab Click Delete row pop-, type ID corresponding row, e.g., a1, click OK can delete tables way. table now look like .  Let’s segments. tasks: Go tab Type new keyword Type version subjects singular Type version subjects plural Type version missing subjects, .e., version used subject specified Select segment needs object Click Add segment Repeat steps 2-7 every segment suggest following values make adjustments, want . Please note, used NA no_subject_does expect none verbs used without subject. case, recommend still assign value, e.g. NA, instead leaving empty. Remember , case misspell something, can edit entries double-clicking corresponding cell. need no_subject_does one projects, e.g., segments “exposure” “intervene”, try values “exposure ” “intervention ”. Description Singular Description Plural Description subject table now look like :","code":""},{"path":"https://forsterepi.github.io/epicmodel/articles/steplist_creator_tutorial.html","id":"modules","dir":"Articles","previous_headings":"Example","what":"Modules","title":"Steplist Creator Tutorial","text":"creating steps, let’s first add modules. tasks similar segments: Go tab MODULE Type new keyword (keywords appear drop-menus epicmodel output) Type new description (descriptions detailed labels) Click Add Module Repeat steps 2-4 every module suggest following modules: table now looks like :","code":""},{"path":"https://forsterepi.github.io/epicmodel/articles/steplist_creator_tutorial.html","id":"step-tab","dir":"Articles","previous_headings":"Example","what":"STEP tab","title":"Steplist Creator Tutorial","text":"Let’s now finally take closer look tab STEP. bottom left, can see table later contain steps. elements just getting new entries table.  step contains segment potentially /IFNOT conditions. statements can created “Create Statement” block. structure follows structure. may see heading third drop-menu “Object ()” default. select segment then_object_does == 1 drop-menu automatically change “Object ()”.  top right corner, can see two empty fields called “ID” “Description”. fields preview ID description based currently selected elements “Create Statement” block. take look clicking “Add”. preview fields, can find action buttons “Add” “Delete”. add delete table, located bottom right corner. table source drop-menus /IFNOT creation well “Object ()”. addition, epicmodel functions use merging descriptions IDs. Normally, need action buttons add step, corresponding statement automatically added table well (already available) can used mentioned drop-menus.  “Create Statement” block input fields additional step information, including module. action buttons, add delete step table bottom left corner. mentioned, statement yet table bottom right, added adding step. Finally, “Clear” button puts input fields back default values.  Finally, “Create Condition” “Create IFNOT Condition” blocks top left. identical structure. IFNOT conditions combination unlimited number statements. default, one row selection statement displayed. clicking “Add statement”, new row can added. Clicking “Remove statement” deletes last row. “Remove statement” clicked one row displayed, clears selection back default values. row consists drop-menu listing descriptions numeric input. numeric input indicates scenario. statements number part scenario. statements within scenario combined , .e., present order STEP occur () occur (IFNOT). different scenarios combined , .e., one scenario fulfilled order STEP occur () occur (IFNOT). , input rows, preview section IDs descriptions.","code":""},{"path":"https://forsterepi.github.io/epicmodel/articles/steplist_creator_tutorial.html","id":"theory-steps","dir":"Articles","previous_headings":"Example","what":"Theory: Steps","title":"Steplist Creator Tutorial","text":"Now, let’s put steps far. Let’s start component causes, .e., steps without conditions (interventions example). student takes class SCC models student reads Rothman’s 1976 paper student reads Modern Epidemiology (3rd Edition) tasks enter first step: Go tab STEP Select “student” drop-menu “Subject ()” Select “take” drop-menu “” Select “SCC class” drop-menu “Object ()” Look ID description preview Select module “theory” drop-menu “Module” Click “Add” button “Actions: STEP”, “Actions: ” (see screenshot )  Now, put two steps. step table now look like :  ’s finally time create first conditions. following two steps still missing: student reads Rothman’s 1976 paper student reads Modern Epidemiology (3rd Edition) student reads essential literature student reads essential literature student takes class SCC models student knows theory tasks first step: Select “student” drop-menu “Subject ()” Select “read” drop-menu “” Select “essential literature” drop-menu “Object ()” Select module “theory” drop-menu “Module” Since two elements condition, click “Add statement” “Create condition” Select “student reads Rothman’s 1976 paper” first drop-“Create condition” Select “student reads Modern Epidemiology (3rd Edition)” second drop-“Create condition” Look “ID” “Description” preview Click “Add” button “Actions: STEP”  tasks second step: Select “student” drop-menu “Subject ()” Select “know” drop-menu “” Select “theory” drop-menu “Object ()” Select module “theory” drop-menu “Module” Check box “End step?” want use step later outcome definition Since two elements condition, click “Add statement” “Create condition” Select “student reads essential literature” first drop-“Create condition” Select “student takes class SCC models” second drop-“Create condition” Look “ID” “Description” preview see conditions combined combine , change second number 1 2 Click “Add” button “Actions: STEP”  steps table now look like :  word caution: now go back edit descriptions tables , , , step descriptions statements update automatically!","code":""},{"path":"https://forsterepi.github.io/epicmodel/articles/steplist_creator_tutorial.html","id":"practice-assumptions-segments-and-steps","dir":"Articles","previous_headings":"Example","what":"Practice: Assumptions, segments, and steps","title":"Steplist Creator Tutorial","text":"Let’s assume know enough practice SCC model creation read epicmodel articles homepage articles good. , let’s identify segments. , e.g., define “homepage” segment. suggest table: learned far, try put segment corresponding table. try identify segments . ’re unsure, can look screenshots end tutorial. Next need include steps. First, include two without condition: read epicmodel articles homepage articles good , include one condition: read epicmodel articles homepage articles good know enough practice SCC model creation , can find screenshot solution article.","code":""},{"path":"https://forsterepi.github.io/epicmodel/articles/steplist_creator_tutorial.html","id":"outcome-definition","dir":"Articles","previous_headings":"Example","what":"Outcome definition","title":"Steplist Creator Tutorial","text":"Finally, let’s specify outcome definition. Tab OUTCOME works similar specify /IFNOT conditions. can, e.g., add remove statements buttons “Add statement” “Remove statement”. However, can select subset steps numbers, represent scenarios, missing. creating outcome definition, can choose end steps, .e., steps, specified end_step == 1 step table tab STEP. Regarding scenarios, still exist specified differently. Every line outcome definitions table fact ’s scenario. means end steps specify together combined logic one line. lines combined logic. single scenario outcome definition , therefore, need single line. tasks specify outcome definition “student knows theory student knows practice”: Go tab OUTCOME Click “Add statement” add second line Select “student knows theory” first drop-Select “student knows practice” second drop-Click “Add”   exercise, try specify alternative outcome definition: “student knows theory student knows practice”. can find solution end article.","code":""},{"path":"https://forsterepi.github.io/epicmodel/articles/steplist_creator_tutorial.html","id":"save-steplist","dir":"Articles","previous_headings":"Example","what":"Save steplist","title":"Steplist Creator Tutorial","text":"final action, want download steplist. close app now, progress lost. tasks: Go tab START Click “Download Steplist” Select folder save Back R, can load readRDS() Also, want continue creating steplist another day, save described conduct following tasks: Start new session Launch app Stay tab START Click “Upload Steplist” Select previously saved steplist folder","code":""},{"path":[]},{"path":"https://forsterepi.github.io/epicmodel/articles/steplist_creator_tutorial.html","id":"practice-segments","dir":"Articles","previous_headings":"Solutions","what":"Practice: Segments","title":"Steplist Creator Tutorial","text":"remember enter epicmodel articles plural?","code":""},{"path":"https://forsterepi.github.io/epicmodel/articles/steplist_creator_tutorial.html","id":"practice-steps","dir":"Articles","previous_headings":"Solutions","what":"Practice: Steps","title":"Steplist Creator Tutorial","text":"remember check “End step?” student knows practice?","code":""},{"path":"https://forsterepi.github.io/epicmodel/articles/steplist_creator_tutorial.html","id":"alternative-outcome-definition","dir":"Articles","previous_headings":"Solutions","what":"Alternative outcome definition","title":"Steplist Creator Tutorial","text":"Outcome definition: student knows theory student knows practice","code":""},{"path":"https://forsterepi.github.io/epicmodel/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Felix Forster. Author, maintainer, copyright holder.","code":""},{"path":"https://forsterepi.github.io/epicmodel/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Forster F (2024). epicmodel: Causal Modeling Epidemiology. R package version 0.1.0, https://forsterepi.github.io/epicmodel/.","code":"@Manual{,   title = {epicmodel: Causal Modeling in Epidemiology},   author = {Felix Forster},   year = {2024},   note = {R package version 0.1.0},   url = {https://forsterepi.github.io/epicmodel/}, }"},{"path":[]},{"path":"https://forsterepi.github.io/epicmodel/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Causal Modeling in Epidemiology","text":"epicmodel short “Causal Modeling Epidemiology” wants offer necessary tools causal modeling workflow R epidemiologists. Causal modeling describes structured process making causal assumptions based epidemiological study conduted results interpreted. always making causal assumptions, least implicitly. Causal modeling explicitly. ever wonder measure, define variables, model outcome interest? yes, chances need think causal model detail. Causal models created making causal assumptions (.e., variable causes variable B) within causal modeling framework. current version epicmodel focuses one frameworks, sufficient-component cause (SCC) models, offers way create using R. SCC models describe, sets causes combination sufficient outcome interest occur. package documentation contains many terms specific meanings context package. Check glossary overview: vignette(\"glossary\").","code":""},{"path":"https://forsterepi.github.io/epicmodel/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Causal Modeling in Epidemiology","text":"Creating SCC models follows three-step workflow (see vignette(\"epicmodel\") overview): Create input SCC model creation, called steplist, using built-shiny app. See vignette(\"steplist\") details. Let epicmodel create SCC model steplist. Use SCC model, e.g., : Estimating standardized effect size Investigating effect interventions (see vignette(\"interventions\") details) Inspecting mechanisms behind sufficient cause (see vignette(\"mechanisms\") details) Transforming SCC model directed acyclic graph (DAG) (see vignette(\"dag\") details)","code":""},{"path":"https://forsterepi.github.io/epicmodel/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Causal Modeling in Epidemiology","text":"","code":"# install.packages(\"devtools\") devtools::install_github(\"forsterepi/epicmodel\")"},{"path":"https://forsterepi.github.io/epicmodel/reference/are_sufficient.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if a certain set of component causes is suffcient — are_sufficient","title":"Check if a certain set of component causes is suffcient — are_sufficient","text":"Provide SCC model set component causes evaluate provided set causes fulfills sufficient cause, .e., sufficient outcome occur based provided SCC model. Fulfilling sufficient cause means component causes certain sufficient cause provided set causes. Unknown causes ignored function.","code":""},{"path":"https://forsterepi.github.io/epicmodel/reference/are_sufficient.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if a certain set of component causes is suffcient — are_sufficient","text":"","code":"are_sufficient(scc, causes = NULL, type = c(\"status\", \"binary\"))"},{"path":"https://forsterepi.github.io/epicmodel/reference/are_sufficient.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if a certain set of component causes is suffcient — are_sufficient","text":"scc object class epicmodel_scc. causes NULL (default) character vector containing IDs set component causes. NULL, prints list available component causes. type Either \"status\" (default) \"binary\". \"status\", returns one \"always\", \"depends\", \"never\". \"binary\", returns TRUE FALSE.","code":""},{"path":"https://forsterepi.github.io/epicmodel/reference/are_sufficient.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if a certain set of component causes is suffcient — are_sufficient","text":"type = \"binary, returns TRUE component causes least one sufficient cause causes FALSE otherwise. type = status, returns \"always\" least one sufficient cause sufficiency status \"always\" fulfilled. , returns \"depends\" least one sufficient cause sufficiency status \"depends\" \"depends (potential order implausibilities)\" fulfilled. sufficient cause fulfilled, returns \"never\".","code":""},{"path":"https://forsterepi.github.io/epicmodel/reference/are_sufficient.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check if a certain set of component causes is suffcient — are_sufficient","text":"Depending value type, following values possible: type = \"status\": provided set causes contains component causes sufficient cause status \"always\", returns \"always\". provided set causes fulfills sufficient cause status \"depends\" \"depends (potential order implausibilities)\", returns \"depends\". sufficient causes fulfilled, returns \"never\". type = \"binary\": returned status \"always\" \"depends\", TRUE returned. returned status \"never\", returns FALSE.","code":""},{"path":"https://forsterepi.github.io/epicmodel/reference/are_sufficient.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if a certain set of component causes is suffcient — are_sufficient","text":"","code":"# Create some SCC model steplist_checked <- check_steplist(steplist_rain) #>  #> ── Checking epicmodel_steplist steplist_rain ─────────────────────────────────── #> ✔ Checking WHAT IDs was successful. #> ✔ Checking DOES IDs was successful. #> ✔ Checking WHERE IDs was successful. #> ✔ Checking Module IDs was successful. #> ✔ Checking ICC IDs was successful. #> ✔ Checking WHAT keywords was successful. #> ✔ Checking DOES keywords was successful. #> ✔ Checking WHERE keywords was successful. #> ✔ Checking Module keywords was successful. #> ✔ Checking Modules was successful. #> ✔ Checking ICC entries was successful. #> ✔ Checking WHAT segments was successful. #> ✔ Checking DOES segments was successful. #> ✔ Checking WHERE segments was successful. #> ✔ Checking references was successful. #> ✔ Checking start/end steps was successful. #> ✔ Checking THEN statements was successful. #> ✔ Checking THEN/IF/IFNOT equality was successful. #> ✔ Checking outcome definitions was successful. #> ── Summary ───────────────────────────────────────────────────────────────────── #> ✔ Checking successful! scc_model <- create_scc(steplist_checked) #>  #> ── Create SCC Model ── #>  #> ✔ 15/15 | Check if set of component causes is sufficient #> ✔ 5/5 | Check if sufficiency dependends on IFNOT conditions #> ✔ 5/5 | Check if sufficient cause is minimal #> ℹ 2/5 sufficient causes are minimal  # Check sufficiency for a certain set of component causes are_sufficient(scc_model, c(\"THENa1\",\"THENa5\"), type = \"status\") #> [1] \"never\" are_sufficient(scc_model, c(\"THENa1\",\"THENa5\"), type = \"binary\") #> [1] FALSE"},{"path":"https://forsterepi.github.io/epicmodel/reference/check_steplist.html","id":null,"dir":"Reference","previous_headings":"","what":"Check epicmodel_steplist class objects — check_steplist","title":"Check epicmodel_steplist class objects — check_steplist","text":"Check epicmodel_steplist class objects fulfill conditions inputed create_scc().","code":""},{"path":"https://forsterepi.github.io/epicmodel/reference/check_steplist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check epicmodel_steplist class objects — check_steplist","text":"","code":"check_steplist(steplist)"},{"path":"https://forsterepi.github.io/epicmodel/reference/check_steplist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check epicmodel_steplist class objects — check_steplist","text":"steplist object class epicmodel_steplist.","code":""},{"path":"https://forsterepi.github.io/epicmodel/reference/check_steplist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check epicmodel_steplist class objects — check_steplist","text":"Prints information successful unsuccessful checks console. Returns input steplist. checks successful, returns steplist class epicmodel_steplist_checked can used building SCC models.","code":""},{"path":"https://forsterepi.github.io/epicmodel/reference/check_steplist.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check epicmodel_steplist class objects — check_steplist","text":"following checks conducted:","code":""},{"path":"https://forsterepi.github.io/epicmodel/reference/check_steplist.html","id":"errors","dir":"Reference","previous_headings":"","what":"Errors","title":"Check epicmodel_steplist class objects — check_steplist","text":"Correct ID format segments duplicated IDs segments Correct ID format segments duplicated IDs segments Correct ID format segments duplicated IDs segments Correct ID format Modules duplicated IDs Modules Correct ID format ICC duplicated IDs ICC segments used data.frame step must listed data.frame segments used data.frame step must listed data.frame segments used data.frame step must listed data.frame modules used data.frame step must listed data.frame modules Either steps steps modules specified data.frame step step IDs used ICC definition must specified data.frame step Starting steps, .e., steps without condition, must end_step == 1 data.frame step steplist must contain component causes case two steps identical statements, end_step == 1 end_step == 0 data.frame step statements used /IFNOT conditions must available chaining, .e., must step statement part step must defined end step steps, statement must available data.frame step must identical IFNOT conditions step’s statement must part /IFNOT condition steps used outcome definition must data.frame step end_step == 1","code":""},{"path":"https://forsterepi.github.io/epicmodel/reference/check_steplist.html","id":"warnings","dir":"Reference","previous_headings":"","what":"Warnings","title":"Check epicmodel_steplist class objects — check_steplist","text":"duplicated keywords segments duplicated keywords segments duplicated keywords segments duplicated keywords Modules segments data.frame used data.frame step segments data.frame used data.frame step segments data.frame used data.frame step modules data.frame modules used data.frame step steps references steps identical statements steps end_step == 1in data.frame step used outcome definition Outcome definitions contained , e.g., outcome definition (B) (B C), B contained, .e., subset , B C, makes B C redundant","code":""},{"path":"https://forsterepi.github.io/epicmodel/reference/check_steplist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check epicmodel_steplist class objects — check_steplist","text":"","code":"steplist_checked <- check_steplist(steplist_rain) #>  #> ── Checking epicmodel_steplist steplist_rain ─────────────────────────────────── #> ✔ Checking WHAT IDs was successful. #> ✔ Checking DOES IDs was successful. #> ✔ Checking WHERE IDs was successful. #> ✔ Checking Module IDs was successful. #> ✔ Checking ICC IDs was successful. #> ✔ Checking WHAT keywords was successful. #> ✔ Checking DOES keywords was successful. #> ✔ Checking WHERE keywords was successful. #> ✔ Checking Module keywords was successful. #> ✔ Checking Modules was successful. #> ✔ Checking ICC entries was successful. #> ✔ Checking WHAT segments was successful. #> ✔ Checking DOES segments was successful. #> ✔ Checking WHERE segments was successful. #> ✔ Checking references was successful. #> ✔ Checking start/end steps was successful. #> ✔ Checking THEN statements was successful. #> ✔ Checking THEN/IF/IFNOT equality was successful. #> ✔ Checking outcome definitions was successful. #> ── Summary ───────────────────────────────────────────────────────────────────── #> ✔ Checking successful!"},{"path":"https://forsterepi.github.io/epicmodel/reference/create_scc.html","id":null,"dir":"Reference","previous_headings":"","what":"Creating SCC models — create_scc","title":"Creating SCC models — create_scc","text":"Creates sufficient-components cause (SCC) model steplist, list /statements describing causal mechanism behind outcome interest. steplist needs meet cretain structural requirements. Therefore, steplist creation, use Steplist Creator shiny app launched launch_steplist_creator().","code":""},{"path":"https://forsterepi.github.io/epicmodel/reference/create_scc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creating SCC models — create_scc","text":"","code":"create_scc(steplist)"},{"path":"https://forsterepi.github.io/epicmodel/reference/create_scc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creating SCC models — create_scc","text":"steplist object class epicmodel_steplist_checked.","code":""},{"path":"https://forsterepi.github.io/epicmodel/reference/create_scc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creating SCC models — create_scc","text":"object class epicmodel_scc. sufficient causes found, object returned instead corresponding message displayed console.","code":""},{"path":"https://forsterepi.github.io/epicmodel/reference/create_scc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Creating SCC models — create_scc","text":"following algorithm used create sufficient-component cause (SCC) model steplist. Check inputs: steplist needs checked check_steplist() input modules used: Evaluate steplist contains modules Process steplist: Process steplist outcome definition can used procedure Get combinations component causes steplist: Component causes steps, condition appear conditions steps (maybe additionally IFNOT conditions). Interventions considered component causes. Interventions well steps without condition, appear IFNOT conditions steps. Invalid combinations component causes specified ICC part steplist excluded, well every component cause FALSE. Check sufficiency: Sufficiency checked every combination component causes. First, based specific set component causes, derived, steps can caused set, .e., conditions fulfilled. , current set included steps defined, beginning includes corresponding set component causes. , iteratively checked, steps condition (.e., excluding non-selected component causes interventions) condition fulfilled. steps added current set included steps process repeated new steps condition fulfilled. Second, final list steps compared outcome definitions. fulfilled, set component causes sufficient. Check IFNOT conditions: Please note IFNOT conditions ignored point. Now, sets component causes found sufficient previously, re-checked IFNOT conditions. First, checked IFNOT conditions final list steps derived fulfilled based steps list. , checking complete corresponding set component causes always sufficient. yes, checking required. cases, sufficiency depends order individual steps occur. principle, step IFNOT conditions fulfilled, occurs condition fulfilled IFNOT condition, similar care door closed already went still open. Please note approach extends SCC models additional time component. Sufficiency therefore re-checked possible sequences IFNOT conditions steps include IFNOT conditions can fulfilled final set steps. possible component causes IFNOT conditions. Since condition, statement used instead. every sequence, evaluated (component causes) occurs IFNOT. /occur corresponding IFNOT, step removed final list steps. Sufficieny now re-checked based updated list. orderings fulfill outcome definition, sufficiency status corresponding set component causes changed \"depends\", depends sequence events. Please note currently, sequences checked even though might implausible, e.g., two steps IFNOT conditions chained together. case, warning displayed, user ultimately needs check plausibility sequence events. Minimize: Sufficient causes must minimal definition, .e., every component cause must necessary within sufficient cause, .e., absence one component cause sufficient set means outcome occur anymore. Therefore, list sufficient (always depends) sets component causes reduced minimal ones. Add unknown causes: possible/likely unknown causes, component causes sufficient causes, part model yet. Therefore, every sufficient cause gets additional individual (.e., different one sufficient cause) unknown component cause representing additional unknown components, one unknown sufficient cause added model consisting single unknown component cause representing unknown sufficient causes. relevant, user can decide functions SCC model input unknown causes ahould included . Output preparation: Combines outputs object class epicmodel_scc analysis.","code":""},{"path":"https://forsterepi.github.io/epicmodel/reference/create_scc.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Creating SCC models — create_scc","text":"Rothman KJ (1976): Causes. American Journal Epidemiology 104 (6): 587–592.","code":""},{"path":[]},{"path":"https://forsterepi.github.io/epicmodel/reference/create_scc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creating SCC models — create_scc","text":"","code":"# First, create a steplist in the shiny app # Launch the app with launch_steplist_creator() # Then load your steplist using readRDS() # In this example we use the built-in steplist_rain  # Check the steplist before running create_scc() steplist_checked <- check_steplist(steplist_rain) #>  #> ── Checking epicmodel_steplist steplist_rain ─────────────────────────────────── #> ✔ Checking WHAT IDs was successful. #> ✔ Checking DOES IDs was successful. #> ✔ Checking WHERE IDs was successful. #> ✔ Checking Module IDs was successful. #> ✔ Checking ICC IDs was successful. #> ✔ Checking WHAT keywords was successful. #> ✔ Checking DOES keywords was successful. #> ✔ Checking WHERE keywords was successful. #> ✔ Checking Module keywords was successful. #> ✔ Checking Modules was successful. #> ✔ Checking ICC entries was successful. #> ✔ Checking WHAT segments was successful. #> ✔ Checking DOES segments was successful. #> ✔ Checking WHERE segments was successful. #> ✔ Checking references was successful. #> ✔ Checking start/end steps was successful. #> ✔ Checking THEN statements was successful. #> ✔ Checking THEN/IF/IFNOT equality was successful. #> ✔ Checking outcome definitions was successful. #> ── Summary ───────────────────────────────────────────────────────────────────── #> ✔ Checking successful!  # Use the checked steplist in create_scc() scc_model <- create_scc(steplist_checked) #>  #> ── Create SCC Model ── #>  #> ✔ 15/15 | Check if set of component causes is sufficient #> ✔ 5/5 | Check if sufficiency dependends on IFNOT conditions #> ✔ 5/5 | Check if sufficient cause is minimal #> ℹ 2/5 sufficient causes are minimal"},{"path":"https://forsterepi.github.io/epicmodel/reference/effect_size.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine standardized effect size of component causes — effect_size","title":"Determine standardized effect size of component causes — effect_size","text":"SCC models teach us effect strength, e.g., risk ratio, natural constant depends prevalence component causes , therefore, differs populations. However, even without population, function derives effect sizes every component cause comparing many sets component causes without certain cause sufficient cause outcome interest.","code":""},{"path":"https://forsterepi.github.io/epicmodel/reference/effect_size.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine standardized effect size of component causes — effect_size","text":"","code":"effect_size(scc, depends = TRUE, output = c(\"nice\", \"table\"))"},{"path":"https://forsterepi.github.io/epicmodel/reference/effect_size.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine standardized effect size of component causes — effect_size","text":"scc object class epicmodel_scc. depends TRUE (default) FALSE. FALSE, includes sufficient causes suffciency status \"always\". output single element type character, either \"nice\" (default) \"table\". \"table\", returns data.frame. \"nice\", nicely formated output printed console.","code":""},{"path":"https://forsterepi.github.io/epicmodel/reference/effect_size.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine standardized effect size of component causes — effect_size","text":"Either dataframe (output = \"table\") one row every component cause variables id (step ID), desc (step description), suff_true, suff_false, num_combos_true, num_combos_false, ratio, nicely formated output console (output = \"nice\"). See Details information.","code":""},{"path":"https://forsterepi.github.io/epicmodel/reference/effect_size.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Determine standardized effect size of component causes — effect_size","text":"following algorithm used derive effect sizes SCC models: effect size derived one specific component cause. following steps repeated . Get potential combinations component causes Remove combinations contain incompatible component causes (ICC), specified steplist Split set possible combinations component causes two parts: Sets, component cause interest present & sets, component cause interest absent. numbers recorded returned output table (output = \"table\") variables num_combos_true (cause present) num_combos_false (cause absent). incompatible component causes (ICC), values . Check possible combinations component causes, sufficient outcome occur. number sufficient combinations counted separately combinations component cause interest present combinations component cause interest absent. numbers recorded returned output table (output = \"table\") variables suff_true (cause present) suff_false (cause absent). ratio calculated using following formula: (suff_true / num_combos_true) / (suff_false / num_combos_false). output table (output = \"table\"), value stored variable ratio. nice output (output = \"nice\"), reported column Impact, shows: ratio [suff_true/num_combos_true vs. suff_false/num_combos_false] two special cases calculating ratio. suff_true > 0 suff_false == 0, outcome occurs corresponding component cause present. ratio gets value necessary. suff_true == 0 suff_false == 0, ratio gets value cause.","code":""},{"path":"https://forsterepi.github.io/epicmodel/reference/effect_size.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determine standardized effect size of component causes — effect_size","text":"","code":"# Create some SCC model steplist_checked <- check_steplist(steplist_rain) #>  #> ── Checking epicmodel_steplist steplist_rain ─────────────────────────────────── #> ✔ Checking WHAT IDs was successful. #> ✔ Checking DOES IDs was successful. #> ✔ Checking WHERE IDs was successful. #> ✔ Checking Module IDs was successful. #> ✔ Checking ICC IDs was successful. #> ✔ Checking WHAT keywords was successful. #> ✔ Checking DOES keywords was successful. #> ✔ Checking WHERE keywords was successful. #> ✔ Checking Module keywords was successful. #> ✔ Checking Modules was successful. #> ✔ Checking ICC entries was successful. #> ✔ Checking WHAT segments was successful. #> ✔ Checking DOES segments was successful. #> ✔ Checking WHERE segments was successful. #> ✔ Checking references was successful. #> ✔ Checking start/end steps was successful. #> ✔ Checking THEN statements was successful. #> ✔ Checking THEN/IF/IFNOT equality was successful. #> ✔ Checking outcome definitions was successful. #> ── Summary ───────────────────────────────────────────────────────────────────── #> ✔ Checking successful! scc_model <- create_scc(steplist_checked) #>  #> ── Create SCC Model ── #>  #> ✔ 15/15 | Check if set of component causes is sufficient #> ✔ 5/5 | Check if sufficiency dependends on IFNOT conditions #> ✔ 5/5 | Check if sufficient cause is minimal #> ℹ 2/5 sufficient causes are minimal  # Use the SCC model in effect_size() effect_size(scc_model) #> ✔ 4/4 | Check impact of every component cause #>                        Component Cause                  Impact #> 1                                 rain necessary [5/8 vs. 0/8] #> 2                        get groceries      4.00 [4/8 vs. 1/8] #> 3 IFNOT take vacation THEN no vacation      1.50 [3/8 vs. 2/8] #> 4                              weekday      1.50 [3/8 vs. 2/8]"},{"path":"https://forsterepi.github.io/epicmodel/reference/epicmodel-package.html","id":null,"dir":"Reference","previous_headings":"","what":"epicmodel: Causal Modeling in Epidemiology — epicmodel-package","title":"epicmodel: Causal Modeling in Epidemiology — epicmodel-package","text":"Create causal models use epidemiological studies, including sufficient-component cause models.","code":""},{"path":[]},{"path":"https://forsterepi.github.io/epicmodel/reference/epicmodel-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"epicmodel: Causal Modeling in Epidemiology — epicmodel-package","text":"Maintainer: Felix Forster felix.forster@med.uni-muenchen.de (ORCID) [copyright holder]","code":""},{"path":"https://forsterepi.github.io/epicmodel/reference/epicmodel_scc.html","id":null,"dir":"Reference","previous_headings":"","what":"SCC model objects — new_scc","title":"SCC model objects — new_scc","text":"S3 class epicmodel_scc used store information sufficient-component cause (SCC) models created create_scc(). new_scc(), validate_scc(), empty_scc() define S3 class. print() prints summary SCC models console. summary() print() identical. plot() creates familiar causal pie charts object class epicmodel_scc.","code":""},{"path":"https://forsterepi.github.io/epicmodel/reference/epicmodel_scc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SCC model objects — new_scc","text":"","code":"new_scc(x = list())  validate_scc(x)  empty_scc()  # S3 method for class 'epicmodel_scc' print(x, ...)  # S3 method for class 'epicmodel_scc' summary(object, ...)  # S3 method for class 'epicmodel_scc' plot(   x,   remove_sc = NULL,   sc_label = NULL,   unknown = TRUE,   names = TRUE,   text_color = NULL,   pie_color = NULL,   border_color = NULL,   ... )"},{"path":"https://forsterepi.github.io/epicmodel/reference/epicmodel_scc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SCC model objects — new_scc","text":"x x used several functions: new_scc(): list converted class epicmodel_scc. validate_scc(): object class epicmodel_scc validated. print.epicmodel_scc(): object class epicmodel_scc. plot.epicmodel_scc(): object class epicmodel_scc. ... Additional arguments generics print(), summary(), plot(). object summary.epicmodel_scc(), object class epicmodel_scc. remove_sc plot.epicmodel_scc(), vector integerish numbers, .e., integers can specified numeric, .e., 1 1L possible. Removes sufficient cause (SC) specified index plot, .e., remove_sc = 2, removes SC 2, remove_sc = c(2,3), removes SC 2 SC 3. x sufficient causes model, x highest allowed value. least one sufficient cause needs remain, .e., sufficient causes can removed. NULL (default), sufficient causes plotted. sc_label plot.epicmodel_scc(), character vector labels written pies, .e., sufficient causes. NULL (default), \"Sufficient Cause 1\", \"Sufficient Cause 2\", etc. used. specified, try provide many labels pies plot. Duplicates allowed. unknown plot.epicmodel_scc(), TRUE (default) FALSE. TRUE, unknown causes added SCC model: every sufficient cause gets additional individual unknown component cause representing additional unknown components; unknown sufficient cause added model consisting single unknown component cause representing unknown sufficient causes. names plot.epicmodel_scc(), TRUE (default) FALSE. TRUE, includes translation pie segment names descriptions component causes plot. text_color plot.epicmodel_scc(), single element type character, valid color description. Valid color descriptions can named colors (\"white\") hexadecimal color codes (\"#FFFFFF\"). text_color used pie segment names. NULL (default), \"white\" used. pie_color plot.epicmodel_scc(), character vector length 3 containing valid color descriptions. Valid color descriptions can named colors (\"white\") hexadecimal color codes (\"#FFFFFF\"). first element pie_color used color sufficient causes, always sufficient. second element used color sufficient causes, sufficiency depends order occurrence. third element used color unknown sufficient cause, present unknown TRUE. NULL (default), following colors used: \"#B1934A\", \"#A65141\", \"#394165\" border_color plot.epicmodel_scc(), single element type character, valid color description. Valid color descriptions can named colors (\"white\") hexadecimal color codes (\"#FFFFFF\"). border_color used pie borders apart unknown sufficient cause. Therefore, specify border_color unknown FALSE. NULL (default), \"white\" used. (Borders unknown sufficient cause color pie.)","code":""},{"path":"https://forsterepi.github.io/epicmodel/reference/epicmodel_scc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"SCC model objects — new_scc","text":"new_scc(): object class epicmodel_scc. validate_scc(): object class epicmodel_scc checked correct structure. empty_scc(): (realtively) empty object class epicmodel_scc correct structure. print.epicmodel_scc(): Prints summary object class epicmodel_scc console. summary.epicmodel_scc(): print.epicmodel_scc(). plot.epicmodel_scc(): ggplot object.","code":""},{"path":[]},{"path":"https://forsterepi.github.io/epicmodel/reference/epicmodel_scc.html","id":"epicmodel-scc-objects","dir":"Reference","previous_headings":"","what":"epicmodel_scc objects","title":"SCC model objects — new_scc","text":"epicmodel_scc objects lists containing 10 elements. elements described : sc_cc data.frame one column every component cause one row every sufficient cause. Colnames step IDs corresponding steplist. Rownames sufficient cause IDs (see ). cell contains either TRUE FALSE indicating component cause column part set component causes described row. sc_status named character vector one element every sufficient cause. names sufficient cause IDs (see ). elements contain status sufficient cause (see ). , \"always\", \"depends\", \"depends (potential order implausibilities)\" appear. sc_steps list character vectors one list element every sufficient cause. list named using sufficient cause IDs (see ). Every character vector contains step IDs steps part corresponding sufficient cause, .e., can caused corresponding set component causes. sc_order list one list element every sufficient cause. list named using sufficient cause IDs (see ). List elements either NA (sufficient cause's status \"always\") data.frame (sufficient cause's status \"depends\" \"depends (potential order implausibilities)\". Data.frames contain two columns, called \"order\" \"suff\" (short \"sufficient\"), one row every order occurrence. order occurrence summarized \"order\" (character), \"suff\" either TRUE FALSE indicating corresponding order occurrence sufficient, .e., leads outcome, . sc_implausibilities named vector TRUE FALSE length equal number sufficient causes. names sufficient cause IDs (see ). TRUE corresponding sufficient cause potential order implausibilities, .e., status \"depends (potential order implausibilities)\", FALSE otherwise. sc_implausibilities_detail list one list element every sufficient cause. list named using sufficient cause IDs (see ). List elements either NA (corresponding element sc_implausibilities FALSE) character vector (corresponding element sc_implausibilities TRUE) statements steps might involved implausible orders occurrence. sc_use_modules Either TRUE FALSE indicating modules specified steplist. unknown_cc Similar sc_cc includes unknown component causes unknown sufficient cause (see \"Unknown causes\" ). therefore additionally contains: one column right every sufficient cause name \"Urownumber\" (U1, U2, etc.) values equal FALSE appart row rownumber, TRUE one additional column right name \"USC\" values equal FALSE sufficient causes one additional row name \"cc0\" values equal FALSE apart column \"USC\", TRUE unknown_status Similar sc_status one additional element value \"unknown\" name \"cc0\" (see \"Unknown causes\" ). steplist object class epicmodel_steplist_checked input function create_scc(), epicmodel_scc object created.","code":""},{"path":"https://forsterepi.github.io/epicmodel/reference/epicmodel_scc.html","id":"other-details-","dir":"Reference","previous_headings":"","what":"Other details:","title":"SCC model objects — new_scc","text":"Sufficient cause IDs create_scc() checks every combination component causes sufficiency. Every combination assigned ID format \"ccnumber\" (cc1, cc2, etc.). epicmodel_scc contains information minimally sufficient combinations component causes, initial IDs kept. IDs used throughout different elements epicmodel_scc link information belongs sufficient cause. unknown sufficient cause used elements unknown_cc unknown_status ID cc0. Unknown causes Since many causes might unknown, reasonable applications include unknown causes SCC model (see, e.g., Rothman et al. (2008)). also useful remind us limited knowledge. suffcient-component cause model, unknown causes come two flavors: Unknown component causes: additional component causes within sufficient cause, necessary sufficiency. Please note sufficient cause set unknown component causes. unknown_cc, unknown component causes called U1, U2, etc. Unknown sufficient causes: might unknown mechanisms lead outcome occurrence. sufficient causes summarized one additional sufficient cause, single component cause called USC unknown_cc. set component causes sufficient cause ID cc0. Please note plot_dag() ellipse represents determinative set sufficient causes, suggested defined VanderWeele & Robins (2007). determinative set contains sufficient causes , therefore, cases, unknown sufficient cause necessary least achieve theoretical determinative set. Determinative sets important creating causal diagrams (form directed acyclic graphs) SCC models. VanderWeele Robins (2007) write (p. 1099, D refers outcome): \"ensure DAG sufficient causation structure causal DAG, important set sufficient causes D graph determinative set sufficient causes — , sufficient causes represent pathways outcome D may occur. Otherwise certain nodes may common causes graph, graph causal DAG.\" can course argued unknown sufficient cause described form hardly use creating causal graph (DAG) SCC model. Nonetheless, can , mentioned, placeholder reminder limited knowledge. Sufficiency status sufficiency status describes circumstances certain set component causes sufficient. 5 possible values: always: set component causes always sufficient. depends: set component causes sometimes sufficient sufficiency depends order occurrence involved steps, contain IFNOT conditions. However, IFNOT condition prevents step happening depends order occurrence: condition fulfilled IFNOT condition, step (usually) occurs anyways, similar care door closed already went still open. depends (potential order implausibilities): \"depends\", list potential orders occurrence involved steps, might make sense practice, e.g., two steps IFNOT conditions chained together: Imagine Step1 condition If1 IFNOT condition Ifnot1, Step2 condition If2 IFNOT condition Step1. order Step1 -> Ifnot1 -> If1 -> If2 plausible Ifnot1 occurred If1 therefore Step1 never occur. user needs discard orders occurrence (currently confident correctly remove implausible ones code). never: set component causes never sufficient. status used epicmodel_scc. used investigating effect interventions (see intervene()). unknown: status unknown sufficient cause, added SCC model. used element unknown_status epicmodel_scc objects.","code":""},{"path":"https://forsterepi.github.io/epicmodel/reference/epicmodel_scc.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"SCC model objects — new_scc","text":"Rothman KJ, Greenland S, Poole C, Lash TL (2008): Causation Causal Inference. : Rothman KJ, Greenland S, Lash TL (Ed.): Modern epidemiology. Third edition. Philadelphia, Baltimore, New York: Wolters Kluwer Health Lippincott Williams & Wilkins, pp. 5–31. VanderWeele TJ, Robins JM (2007): Directed acyclic graphs, sufficient causes, properties conditioning common effect. American Journal Epidemiology 166 (9): 1096–1104.","code":""},{"path":[]},{"path":"https://forsterepi.github.io/epicmodel/reference/epicmodel_scc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"SCC model objects — new_scc","text":"","code":"# epicmodel_scc object are created by create_scc()  # first, check your steplist of choice steplist_checked <- check_steplist(steplist_rain) #>  #> ── Checking epicmodel_steplist steplist_rain ─────────────────────────────────── #> ✔ Checking WHAT IDs was successful. #> ✔ Checking DOES IDs was successful. #> ✔ Checking WHERE IDs was successful. #> ✔ Checking Module IDs was successful. #> ✔ Checking ICC IDs was successful. #> ✔ Checking WHAT keywords was successful. #> ✔ Checking DOES keywords was successful. #> ✔ Checking WHERE keywords was successful. #> ✔ Checking Module keywords was successful. #> ✔ Checking Modules was successful. #> ✔ Checking ICC entries was successful. #> ✔ Checking WHAT segments was successful. #> ✔ Checking DOES segments was successful. #> ✔ Checking WHERE segments was successful. #> ✔ Checking references was successful. #> ✔ Checking start/end steps was successful. #> ✔ Checking THEN statements was successful. #> ✔ Checking THEN/IF/IFNOT equality was successful. #> ✔ Checking outcome definitions was successful. #> ── Summary ───────────────────────────────────────────────────────────────────── #> ✔ Checking successful! # then, use it in create_scc() scc_model <- create_scc(steplist_checked) #>  #> ── Create SCC Model ── #>  #> ✔ 15/15 | Check if set of component causes is sufficient #> ✔ 5/5 | Check if sufficiency dependends on IFNOT conditions #> ✔ 5/5 | Check if sufficient cause is minimal #> ℹ 2/5 sufficient causes are minimal  # new_scc() and validate_scc() are used inside create_scc() # nonetheless, you can check its structure with validate_scc() validate_scc(scc_model) #>  #> ── Outcome Definitions ── #>  #> • you get wet #>  #> ── SC 1 ── #>  #> ✔ Always sufficient #> Component causes: #> • rain #> • get groceries #>  #> Modules #> • activity: 50% (2/4) #> • weather: 50% (2/4) #>  #> ── SC 2 ── #>  #> ✔ Always sufficient #> Component causes: #> • no vacation #> • weekday #> • rain #>  #> Modules #> • activity: 50% (3/6) #> • weather: 33% (2/6) #> • fate: 17% (1/6) #>   # print() and summary() both summarize the model in the console print(scc_model) #> ── Outcome Definitions ── #>  #> • you get wet #>  #> ── SC 1 ── #>  #> ✔ Always sufficient #> Component causes: #> • rain #> • get groceries #>  #> Modules #> • activity: 50% (2/4) #> • weather: 50% (2/4) #>  #> ── SC 2 ── #>  #> ✔ Always sufficient #> Component causes: #> • no vacation #> • weekday #> • rain #>  #> Modules #> • activity: 50% (3/6) #> • weather: 33% (2/6) #> • fate: 17% (1/6) #>  scc_model #> ── Outcome Definitions ── #>  #> • you get wet #>  #> ── SC 1 ── #>  #> ✔ Always sufficient #> Component causes: #> • rain #> • get groceries #>  #> Modules #> • activity: 50% (2/4) #> • weather: 50% (2/4) #>  #> ── SC 2 ── #>  #> ✔ Always sufficient #> Component causes: #> • no vacation #> • weekday #> • rain #>  #> Modules #> • activity: 50% (3/6) #> • weather: 33% (2/6) #> • fate: 17% (1/6) #>  summary(scc_model) #> ── Outcome Definitions ── #>  #> • you get wet #>  #> ── SC 1 ── #>  #> ✔ Always sufficient #> Component causes: #> • rain #> • get groceries #>  #> Modules #> • activity: 50% (2/4) #> • weather: 50% (2/4) #>  #> ── SC 2 ── #>  #> ✔ Always sufficient #> Component causes: #> • no vacation #> • weekday #> • rain #>  #> Modules #> • activity: 50% (3/6) #> • weather: 33% (2/6) #> • fate: 17% (1/6) #>   # plot causal pies with plot() plot(scc_model)"},{"path":"https://forsterepi.github.io/epicmodel/reference/epicmodel_steplist.html","id":null,"dir":"Reference","previous_headings":"","what":"Steplist objects — new_steplist","title":"Steplist objects — new_steplist","text":"S3 classes epicmodel_steplist epicmodel_steplist_checked store input information SCC model creation. created Steplist Creator shiny app, can launched launch_steplist_creator(). new_steplist(), validate_steplist(), empty_steplist() define S3 class. print() prints summary steplist entries console. summary() prints list steps sorted type step console. plot() renders graph complete network mechanisms RStudio Viewer.","code":""},{"path":"https://forsterepi.github.io/epicmodel/reference/epicmodel_steplist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Steplist objects — new_steplist","text":"","code":"new_steplist(x = list())  validate_steplist(x)  empty_steplist()  # S3 method for class 'epicmodel_steplist' print(x, ...)  # S3 method for class 'epicmodel_steplist_checked' print(x, ...)  # S3 method for class 'epicmodel_steplist' summary(object, ...)  # S3 method for class 'epicmodel_steplist_checked' summary(object, ...)  # S3 method for class 'epicmodel_steplist' plot(x, ...)  # S3 method for class 'epicmodel_steplist_checked' plot(x, modules = TRUE, module_colors = NULL, render = TRUE, ...)"},{"path":"https://forsterepi.github.io/epicmodel/reference/epicmodel_steplist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Steplist objects — new_steplist","text":"x x used several functions: new_steplist(): list converted class epicmodel_steplist. validate_steplist(): object class epicmodel_steplist epicmodel_steplist_checked validated. print.epicmodel_steplist(): object class epicmodel_steplist. print.epicmodel_steplist_checked(): object class epicmodel_steplist_checked. plot.epicmodel_steplist(): object class epicmodel_steplist. plot.epicmodel_steplist_checked(): object class epicmodel_steplist_checked. ... Additional arguments generics print(), summary(), plot(). object summary.epicmodel_steplist(), object class epicmodel_steplist. summary.epicmodel_steplist_checked(), object class epicmodel_steplist_checked. modules plot.epicmodel_steplist_checked, TRUE (default) FALSE, indicating nodes module colored equally (TRUE) nodes white background (FALSE). Colors applied, modules actually specified epicmodel_steplist. module_colors plot.epicmodel_steplist_checked, nodes colored module, colors can provided via argument. Colors must provided character vector. named colors hexadecimal color codes allowed. function 8 colors stored internally. module_colors = NULL (default), colors used. model 8 modules, module_colors must specified. colors necessary specified, function takes many necessary start vector. render plot.epicmodel_steplist_checked, TRUE (default), graph directly rendered. FALSE, output contains non-rendered graph.","code":""},{"path":"https://forsterepi.github.io/epicmodel/reference/epicmodel_steplist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Steplist objects — new_steplist","text":"new_steplist(): object class epicmodel_steplist. validate_steplist(): object class epicmodel_steplist epicmodel_steplist_checked, checked correct structure. empty_steplist(): empty object class epicmodel_steplist object correct structure. print.epicmodel_steplist(): Prints number entries data.frame console information steplist unchecked. print.epicmodel_steplist_checked(): print.epicmodel_steplist() information steplist checked successfully. summary.epicmodel_steplist(): Prints allert steplist needs checked check_steplist() using summary(). summary.epicmodel_steplist_checked(): Prints list steps type step console. plot.epicmodel_steplist(): Prints allert steplist needs checked check_steplist() using plot(). plot.epicmodel_steplist_checked(): Prints graph complete network mechanisms RStudio Viewer corresponding legend console.","code":""},{"path":[]},{"path":"https://forsterepi.github.io/epicmodel/reference/epicmodel_steplist.html","id":"epicmodel-steplist-objects","dir":"Reference","previous_headings":"","what":"epicmodel_steplist objects","title":"Steplist objects — new_steplist","text":"epicmodel_steplist objects lists containing 8 data.frames. data.frames described : list subjects objects (segments) appearing step descriptions, e.g., cells, interleukins, symptoms, etc., following variables: id_what: Automatically created ID segments. Starts \"\" followed number, e.g., a1. Used creating automatic step IDs. key_what: Keyword describing segment. Used steplist_creator shiny app dropdown menus. desc_what: Text used step descripiton. plural_what: Indicates plural (1) singular (0) version description used, segment used subject, .e., segment segment. list actions verbs (segments), segments interact, e.g., present, produce, migrate, exposed , following variables: id_does: Automatically created ID segments. Starts \"d\" followed number, e.g., d1. Used creating automatic step IDs. key_does: Keyword describing segment. Used steplist_creator shiny app dropdown menus. subject_singular_does: Description used subject (segment front) specified singular (plural_what=0). subject_plural_does: Description used subject (segment front) specified plural (plural_what=1). no_subject_does: Description used subject (segment front) specified. then_object_does: Indicates object segment segment (0) statement (1). list locations (segments), specified actions take place, e.g., airways, following variables: id_where: Automatically created ID segments. Starts \"e\" followed number, e.g., e1. Used creating automatic step IDs. key_where: Keyword describing segment. Used steplist_creator shiny app dropdown menus. desc_where: Text used step descripiton. Please include corresponding preposition, e.g., '', '', '', etc. list combinations , segments (statements). statement can contain 4 segments: (subject), , (object), . 4 need specified. segments, corresponding object segment statement (see then_object_does). general, combinations possible, although , , make lot sense. exists store statements later used IFNOT conditions. contains following variables: id_then: Automatically created ID based segment IDs, e.g., a4, a1d5a15e9, d2a3. desc_then: Automatically created description based segment descriptions. module Modules groups, steps sorted, e.g., immune system, lung, etc., sometimes interest see groups involved sufficient causes. contains following variables: id_module: Automatically created ID modules. Starts \"m\" followed number, e.g., m1. key_module: Keyword describing module. desc_module: Module description. step Main table interest one processed create sufficient-component cause models. contains following variables: id_step: Automatically created step ID based IDs included statements, e.g., IFd6a10IFNOTd6a18+d1a8THENa11d3a12. desc_step: Automatically created step description based descriptions included statements. end_step: Indicator variable describes step end certain sub-mechanism, e.g., symptom x occured. module_step: Module, .e., group, step sorted. note_step: Additional notes important future users, e.g., conflicting results result mouse model. ref_step: References step based. icc ICC short incompatibel component causes. contains pairs component causes, .e., steps without IFNOT condition, compatible , .e., appear sufficient cause. contains following variables: id_icc: Automatically created ID ICC pairs. Starts \"\" followed number, e.g., i1. id1: Step ID first component cause. id2: Step ID second component cause. desc1: Step description first component cause. desc2: Step description second component cause. outc list contains conditions outcome interest assumed occur. line might contain one statements, marked end steps setting step$end_step 1. one statement selected, combined logic. lines table combined logic, .e., specified conditions assumed represent outcome occurrence. table contains following variables: id_outc: Automatically created ID outcome definitions combination statement IDs connected '+'. desc_outc: Automatically created description outcome definitions combination statement descriptions.","code":""},{"path":"https://forsterepi.github.io/epicmodel/reference/epicmodel_steplist.html","id":"epicmodel-steplist-checked-objects","dir":"Reference","previous_headings":"","what":"epicmodel_steplist_checked objects","title":"Steplist objects — new_steplist","text":"using epicmodel_steplist object SCC model creation create_scc(), need checked structures might make SCC model creation impossible. Checking performed check_steplist() successful, returned object type epicmodel_steplist_checked. changing steplist Steplist Creator shiny app functions remove_all_modules(), remove_na(), remove_segment(), steplist \"un-checked\" returned class epicmodel_steplist. Apart , classes similar structure, can validated validate_steplist().","code":""},{"path":"https://forsterepi.github.io/epicmodel/reference/epicmodel_steplist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Steplist objects — new_steplist","text":"","code":"# Create steplists in the Steplist Creator `shiny` app if (FALSE) { # \\dontrun{ launch_steplist_creator()  # Download the steplist from the `shiny` app # Load the steplist into R steplist <- readRDS(\"folder/file.rds\") } # }  # To familiarize yourself with the package you can use a built-in steplist steplist <- steplist_rain  # new_steplist(), validate_steplist(), and empty_steplist() are used in the `shiny` app # nonetheless, you can check steplist structures with validate_steplist() validate_steplist(steplist) #> ✖ unchecked (please run `check_steplist()` before continuing) #> WHAT:  7  WHAT segments #> DOES:  6  DOES segments #> WHERE:  3  WHERE segments #> MODULE:  3  modules #> STEP:  10  STEPs #> ICC:  0  incompatible component-cause pairs #> OUTCOME:  1  outcome definition  # print() provides a summary of steplist entries and if it'S checked or unchecked print(steplist) #> ✖ unchecked (please run `check_steplist()` before continuing) #> WHAT:  7  WHAT segments #> DOES:  6  DOES segments #> WHERE:  3  WHERE segments #> MODULE:  3  modules #> STEP:  10  STEPs #> ICC:  0  incompatible component-cause pairs #> OUTCOME:  1  outcome definition  # Check steplist before using `summary()` and `plot()` steplist_checked <- check_steplist(steplist) #>  #> ── Checking epicmodel_steplist steplist ──────────────────────────────────────── #> ✔ Checking WHAT IDs was successful. #> ✔ Checking DOES IDs was successful. #> ✔ Checking WHERE IDs was successful. #> ✔ Checking Module IDs was successful. #> ✔ Checking ICC IDs was successful. #> ✔ Checking WHAT keywords was successful. #> ✔ Checking DOES keywords was successful. #> ✔ Checking WHERE keywords was successful. #> ✔ Checking Module keywords was successful. #> ✔ Checking Modules was successful. #> ✔ Checking ICC entries was successful. #> ✔ Checking WHAT segments was successful. #> ✔ Checking DOES segments was successful. #> ✔ Checking WHERE segments was successful. #> ✔ Checking references was successful. #> ✔ Checking start/end steps was successful. #> ✔ Checking THEN statements was successful. #> ✔ Checking THEN/IF/IFNOT equality was successful. #> ✔ Checking outcome definitions was successful. #> ── Summary ───────────────────────────────────────────────────────────────────── #> ✔ Checking successful! summary(steplist_checked) #>  #> ── Outcome Definitions ── #>  #> • you get wet #>  #> ── Component causes ── #>  #> • no vacation #> • weekday #> • rain #> • get groceries #>  #> ── Interventions ── #>  #> • take vacation #> • take umbrella #> • work from home #>  #> ── End steps ── #>  #> • you get wet #>  #> ── Other steps ── #>  #> • walk to work #> • go outside plot(steplist_checked) #> $Graph #>  #> $Legend #>    Label   Module           Step #> 1    CC1 activity    no vacation #> 2    CC2     fate        weekday #> 3    CC3  weather           rain #> 4    CC4 activity  get groceries #> 5     I1 activity  take vacation #> 6     I2 activity  take umbrella #> 7     I3 activity work from home #> 8     S1 activity   walk to work #> 9     S2 activity     go outside #> 10    E1  weather    you get wet #>"},{"path":"https://forsterepi.github.io/epicmodel/reference/export_mechanism.html","id":null,"dir":"Reference","previous_headings":"","what":"Export mechanisms — export_mechanism","title":"Export mechanisms — export_mechanism","text":"Exports one sufficient cause mechanisms PNG, PDF, SVG, PostScript using DiagrammeR::export_graph().","code":""},{"path":"https://forsterepi.github.io/epicmodel/reference/export_mechanism.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export mechanisms — export_mechanism","text":"","code":"export_mechanism(   mechanism,   sc = NULL,   file_name = NULL,   file_type = \"png\",   title = NULL,   ... )"},{"path":"https://forsterepi.github.io/epicmodel/reference/export_mechanism.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export mechanisms — export_mechanism","text":"mechanism object class epicmodel_mechanism. sc single integer value (can specified numeric, e.g., 2 instead 2L). provided, graph exported specified sufficient cause, e.g., SC2 sc = 2. sc = NULL (default), graphs sufficient causes exported. file_name name exported file (including extension). file_type type file exported. Options graph files : png, pdf, svg, ps. title optional title output graph. ... Arguments passed DiagrammeR::export_graph width Output width pixels NULL default. useful export image file formats png, pdf, svg, ps. height Output height pixels NULL default. useful export image file formats png, pdf, svg, ps.","code":""},{"path":"https://forsterepi.github.io/epicmodel/reference/export_mechanism.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Export mechanisms — export_mechanism","text":"Saves mechanisms PNG, PDF, SVG, PostScript.","code":""},{"path":[]},{"path":"https://forsterepi.github.io/epicmodel/reference/export_mechanism.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Export mechanisms — export_mechanism","text":"","code":"# Create some SCC model steplist_checked <- check_steplist(steplist_rain) #>  #> ── Checking epicmodel_steplist steplist_rain ─────────────────────────────────── #> ✔ Checking WHAT IDs was successful. #> ✔ Checking DOES IDs was successful. #> ✔ Checking WHERE IDs was successful. #> ✔ Checking Module IDs was successful. #> ✔ Checking ICC IDs was successful. #> ✔ Checking WHAT keywords was successful. #> ✔ Checking DOES keywords was successful. #> ✔ Checking WHERE keywords was successful. #> ✔ Checking Module keywords was successful. #> ✔ Checking Modules was successful. #> ✔ Checking ICC entries was successful. #> ✔ Checking WHAT segments was successful. #> ✔ Checking DOES segments was successful. #> ✔ Checking WHERE segments was successful. #> ✔ Checking references was successful. #> ✔ Checking start/end steps was successful. #> ✔ Checking THEN statements was successful. #> ✔ Checking THEN/IF/IFNOT equality was successful. #> ✔ Checking outcome definitions was successful. #> ── Summary ───────────────────────────────────────────────────────────────────── #> ✔ Checking successful! scc_model <- create_scc(steplist_checked) #>  #> ── Create SCC Model ── #>  #> ✔ 15/15 | Check if set of component causes is sufficient #> ✔ 5/5 | Check if sufficiency dependends on IFNOT conditions #> ✔ 5/5 | Check if sufficient cause is minimal #> ℹ 2/5 sufficient causes are minimal  # Derive mechanisms mech <- mechanism(scc_model)  # Export mechanism plots if (FALSE) { # \\dontrun{ export_mechanism(mech, file_name = \"folder/file.png\", title = \"Sufficient Cause\") } # }"},{"path":"https://forsterepi.github.io/epicmodel/reference/intervene.html","id":null,"dir":"Reference","previous_headings":"","what":"Explore effect of interventions — intervene","title":"Explore effect of interventions — intervene","text":"Interventions steps without condition (start steps) appear IFNOT conditions, .e., can prevent steps cause . Interventions considered creating SCC models using create_scc(). intervene() evaluates impact two directions: 1) sufficient causes can prevented certain (sets ) interventions 2) set interventions least needed prevent outcome individual given set component causes.","code":""},{"path":"https://forsterepi.github.io/epicmodel/reference/intervene.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Explore effect of interventions — intervene","text":"","code":"intervene(scc, causes = NULL, intervention = NULL, output = c(\"nice\", \"table\"))"},{"path":"https://forsterepi.github.io/epicmodel/reference/intervene.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Explore effect of interventions — intervene","text":"scc object class epicmodel_scc. causes character vector containing step IDs component causes. \"\", investigates sufficient causes, .e., minimally sufficient sets component causes. NULL (default), prints list available component causes console. set step IDs specified, specified set investigated. intervention character vector containing step IDs interventions. \"\", investigates possible combinations available interventions. NULL (default), prints list available interventions console. set step IDs specified, investigates possible combinations specified interventions. output Either \"nice\" (default) \"table\". \"nice\", prints nicely formatted summary console. \"table\", returns list several elements described detail section \"Value\" .","code":""},{"path":[]},{"path":"https://forsterepi.github.io/epicmodel/reference/intervene.html","id":"output","dir":"Reference","previous_headings":"","what":"Output","title":"Explore effect of interventions — intervene","text":"output = \"nice\" (default), prints nicely formatted output console. output = \"table\", returns list following elements: cause_set list character vectors one element every investigated set component causes. character vectors contain step IDs component causes part corresponding set. Sets named format similar cc1, cc2, etc. intv list character vectors one element every investigated set interventions. character vectors contain step IDs interventions part corresponding set. Sets named intv1, intv2, etc. status data.frame one row per set component causes one column per set intervention. addition, contains one column representing interventions (intv0). cell contains sufficiency status corresponding set component causes corresponding set interventions applied. Possible values \"always\", \"depends\", \"never\". See interpretation. minimal data.frame one row per set component causes one column per set intervention. cell either TRUE FALSE indicating set interventions minimal. non-minimal sets interventions, smaller set contained within corresponding set exists preventive power. Minimality defined separately every set component causes. larger non-minimal smaller minimal set sometimes prevent outcome (status \"depends\" status (see )), non-minimal set might actually prevent sufficient orders occurrence minimal set. case, please inspect compare element order (see next), minimal non-minimal sets interventions status \"depends\". order 2-level list, .e., list one element per intervention set, element another list one element per evaluated set component causes. intervention/component causes combination contains data.frame, similar data.frames sc_order element epicmodel_scc objects, corresponding status \"depends\", NA otherwise (\"always\" \"never\"). data.frames contain two columns, called \"order\" \"suff\" (short \"sufficient\"), one row every order occurrence. order occurrence summarized \"order\" (character), \"suff\" either TRUE FALSE indicating corresponding order occurrence sufficient, .e., leads outcome, . Please note prevented orders occurrence suff == FALSE.","code":""},{"path":"https://forsterepi.github.io/epicmodel/reference/intervene.html","id":"how-to-interpret-status","dir":"Reference","previous_headings":"","what":"How to interpret status","title":"Explore effect of interventions — intervene","text":"sufficiency status certain intervention column intv0 always, three sufficiency status options certain intervention following interpretations: always: corresponding set inteventions never prevents outcome, applying intervention, corresponding set component causes still always sufficient. depends: corresponding set interventions sometimes prevents outcome, applying intervention, sufficiency corresponding set component causes depends order occurrence. never: corresponding set interventions always prevents outcome, applying intervention, corresponding set component causes never sufficient. sufficiency status certain intervention column intv0 depends, sufficiency status options certain intervention following interpretations: depends: corresponding set interventions sometimes never prevents outcome, applying intervention, sufficiency corresponding set component causes depends order occurrence. inspection comparison sufficient orders occurrence necessary determine intervention actually prevents anything. never: corresponding set interventions always prevents outcome, applying intervention, corresponding set component causes never sufficient. sufficiency status certain intervention column intv0 never, intervention necessary, corresponding set component causes never sufficient.","code":""},{"path":"https://forsterepi.github.io/epicmodel/reference/intervene.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Explore effect of interventions — intervene","text":"following algorithm used evaluate effect interventions: Derive list intervention sets evaluate Derive list sets component causes evaluate Evaluate sufficiency without intervention every set component causes Evaluate sufficiency every combination intervention set set componen causes: First, check steps prevented corresponding set interventions, .e., steps IFNOT condition fulfilled intervention set. steps removed list available steps. Second, evaluate sufficiency based remaining steps similar create_scc() (Check sufficiency & Check IFNOT conditions). Evaluate, intervention sets minimal, .e., least necessary prevent outcome","code":""},{"path":"https://forsterepi.github.io/epicmodel/reference/intervene.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Explore effect of interventions — intervene","text":"","code":"# Create some SCC model that contains interventions steplist_checked <- check_steplist(steplist_rain) #>  #> ── Checking epicmodel_steplist steplist_rain ─────────────────────────────────── #> ✔ Checking WHAT IDs was successful. #> ✔ Checking DOES IDs was successful. #> ✔ Checking WHERE IDs was successful. #> ✔ Checking Module IDs was successful. #> ✔ Checking ICC IDs was successful. #> ✔ Checking WHAT keywords was successful. #> ✔ Checking DOES keywords was successful. #> ✔ Checking WHERE keywords was successful. #> ✔ Checking Module keywords was successful. #> ✔ Checking Modules was successful. #> ✔ Checking ICC entries was successful. #> ✔ Checking WHAT segments was successful. #> ✔ Checking DOES segments was successful. #> ✔ Checking WHERE segments was successful. #> ✔ Checking references was successful. #> ✔ Checking start/end steps was successful. #> ✔ Checking THEN statements was successful. #> ✔ Checking THEN/IF/IFNOT equality was successful. #> ✔ Checking outcome definitions was successful. #> ── Summary ───────────────────────────────────────────────────────────────────── #> ✔ Checking successful! scc_model <- create_scc(steplist_checked) #>  #> ── Create SCC Model ── #>  #> ✔ 15/15 | Check if set of component causes is sufficient #> ✔ 5/5 | Check if sufficiency dependends on IFNOT conditions #> ✔ 5/5 | Check if sufficient cause is minimal #> ℹ 2/5 sufficient causes are minimal  # Inspect the effect of interventions intervene(scc_model, causes = \"all\", intervention = \"all\") #>  #> ── Intervention ──────────────────────────────────────────────────────────────── #>  #> ── Cause Set 1 ── #>  #> • rain #> • get groceries #>  #> Status without intervention #> ✔ Always sufficient #>  #> Status with intervention #> ✔ Complete prevention by the following minimal intervention sets #>  #> ── Intervention Set 1  #> • take umbrella #>  #> ── Cause Set 2 ── #>  #> • no vacation #> • weekday #> • rain #>  #> Status without intervention #> ✔ Always sufficient #>  #> Status with intervention #> ✔ Complete prevention by the following minimal intervention sets #>  #> ── Intervention Set 1  #> • work from home #>  #> ── Intervention Set 2  #> • take umbrella #>  #> ── Intervention Set 3  #> • take vacation intv <- intervene(scc_model, causes = \"all\", intervention = \"all\", output = \"table\")"},{"path":"https://forsterepi.github.io/epicmodel/reference/launch_steplist_creator.html","id":null,"dir":"Reference","previous_headings":"","what":"Launch steplist creator shiny app — launch_steplist_creator","title":"Launch steplist creator shiny app — launch_steplist_creator","text":"Run function start Steplist Creator shiny app.","code":""},{"path":"https://forsterepi.github.io/epicmodel/reference/launch_steplist_creator.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Launch steplist creator shiny app — launch_steplist_creator","text":"","code":"launch_steplist_creator()"},{"path":"https://forsterepi.github.io/epicmodel/reference/launch_steplist_creator.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Launch steplist creator shiny app — launch_steplist_creator","text":"launch_steplist_creator function used side effect starting Steplist Creator shiny app.","code":""},{"path":"https://forsterepi.github.io/epicmodel/reference/launch_steplist_creator.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Launch steplist creator shiny app — launch_steplist_creator","text":"","code":"if (FALSE) { # \\dontrun{ launch_steplist_creator() } # }"},{"path":"https://forsterepi.github.io/epicmodel/reference/mechanism.html","id":null,"dir":"Reference","previous_headings":"","what":"Investigate mechanisms — mechanism","title":"Investigate mechanisms — mechanism","text":"Creates graphs visiualize mechanisms behind sufficient cause using DiagrammeR package. new_mechanism() validate_mechanism() define epicmodel_mechanism S3 class, created mechanism(). plot() renders graphs RStudio Viewer. print() prints legend node labels console.","code":""},{"path":"https://forsterepi.github.io/epicmodel/reference/mechanism.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Investigate mechanisms — mechanism","text":"","code":"mechanism(scc, modules = TRUE, module_colors = NULL)  new_mechanism(x = list())  validate_mechanism(x)  # S3 method for class 'epicmodel_mechanism' plot(x, reverse = TRUE, ...)  # S3 method for class 'epicmodel_mechanism' print(x, ...)"},{"path":"https://forsterepi.github.io/epicmodel/reference/mechanism.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Investigate mechanisms — mechanism","text":"scc mechanism(), object class epicmodel_scc. modules mechanism(), TRUE (default) FALSE, indicating nodes module colored equally (TRUE) nodes white background (FALSE). Colors applied, modules actually specified epicmodel_steplist. modules considered mechanism(), module keywords added legend (accessable via print()). module_colors mechanism(), nodes colored module, colors can provided via argument. Colors must provided character vector. named colors hexadecimal color codes allowed. function 8 colors stored internally. module_colors = NULL (default), colors used. model 8 modules, module_colors must specified. colors necessary specified, function takes many necessary start vector. x x used several functions: new_mechanism(): list converted class epicmodel_mechanism. validate_mechanism(): object class epicmodel_mechanism validated. plot.epicmodel_mechanism(): object class epicmodel_mechanism. print.epicmodel_mechanism(): object class epicmodel_mechanism. reverse plot.epicmodel_mechanism(), TRUE FALSE indicating output displayed reverse order. Since graphs rendered later show first viewer pane, reverse = T leads SC1 last rendered one displayed top. ... Additional arguments generics print() plot().","code":""},{"path":"https://forsterepi.github.io/epicmodel/reference/mechanism.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Investigate mechanisms — mechanism","text":"mechanism(): object class epicmodel_mechanism. Use plot() plot graphs RStudio Viewer. Use print() print legend console. Use export_mechanism() save graphs PNG, PDF, SVG, PostScript. new_mechanism(): object class epicmodel_mechanism. validate_mechanism(): object class epicmodel_mechanism checked correct structure. plot.epicmodel_mechanism(): Renders graphs RStudio Viewer. print.epicmodel_mechanism(): Prints legend epicmodel_mechanism object console.","code":""},{"path":[]},{"path":"https://forsterepi.github.io/epicmodel/reference/mechanism.html","id":"the-graphs","dir":"Reference","previous_headings":"","what":"The graphs","title":"Investigate mechanisms — mechanism","text":"One graph per sufficient cause created. graphs display steps nodes /IFNOT relations edges. Nodes labeled IDs descriptions due limited space, newly created labels. labels based type node listed together step description legend (accessed print()). Step descriptions also accessible via tooltips graph. Just put cursor node labels. 4 different types nodes: Component causes: Labeled \"CC\", squares, gray border Interventions: Labeled \"\", triangles, gray border End steps: Labeled \"E\", circles, black border steps: Labeled \"S\", circles, gray border 2 types edges: conditions: gray arrows IFNOT conditions: red T-shaped","code":""},{"path":"https://forsterepi.github.io/epicmodel/reference/mechanism.html","id":"epicmodel-mechanism-objects","dir":"Reference","previous_headings":"","what":"epicmodel_mechanism objects","title":"Investigate mechanisms — mechanism","text":"epicmodel_mechanism objects created mechanism(). lists containing 2 elements: legend data.frame 3 variables: Label: Contains labels used graphs. Module: Contains name module step belongs. available modules = TRUE mechanism() SCC model actually uses modules (specified element sc_use_modules epicmodel_scc objects). Step: description corresponding step. graph list length equal number sufficient causes. element contains another list 2 elements: ndf: data.frame containing information nodes graph (see DiagrammeR::node_aes()). edf: data.frame containing information edges graph (see DiagrammeR::edge_aes()). ndf Data.frames containing following variables: id: Node ID used internally DiagrammeR define edges (edf data.frames). type: Type node defined epicmodel. Possible options : cc (component cause), int (intervention), end (step part outcome definition), (steps). label: label displayed graph listed variable Label legend. tooltip: text displayed putting cursor top node label. Corresponds step descriptions variable Step legend. shape: shape node. square type cc, triangle type int, circle types end . color: Color node border. Gray types cc, int, , black type end. fillcolor: Color background, similar steps module. modules considered, fillcolor white nodes. fontcolor: Color node label. Always black. edf Data.frames containing following variables: id: Edge ID used internally DiagrammeR. : Node ID node edge starts. : Node ID node edge ends. rel: Type edge defined epicmodel. Possible options : (node condition node), ifnot (node IFNOT condition node). arrowhead: Type arrow. normal rel tee rel ifnot. arrowsize: Size arrow. 1 rel 1.2 rel ifnot. color: Color arrow. Gray rel #A65141 rel ifnot.","code":""},{"path":[]},{"path":"https://forsterepi.github.io/epicmodel/reference/mechanism.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Investigate mechanisms — mechanism","text":"","code":"# Create some SCC model steplist_checked <- check_steplist(steplist_rain) #>  #> ── Checking epicmodel_steplist steplist_rain ─────────────────────────────────── #> ✔ Checking WHAT IDs was successful. #> ✔ Checking DOES IDs was successful. #> ✔ Checking WHERE IDs was successful. #> ✔ Checking Module IDs was successful. #> ✔ Checking ICC IDs was successful. #> ✔ Checking WHAT keywords was successful. #> ✔ Checking DOES keywords was successful. #> ✔ Checking WHERE keywords was successful. #> ✔ Checking Module keywords was successful. #> ✔ Checking Modules was successful. #> ✔ Checking ICC entries was successful. #> ✔ Checking WHAT segments was successful. #> ✔ Checking DOES segments was successful. #> ✔ Checking WHERE segments was successful. #> ✔ Checking references was successful. #> ✔ Checking start/end steps was successful. #> ✔ Checking THEN statements was successful. #> ✔ Checking THEN/IF/IFNOT equality was successful. #> ✔ Checking outcome definitions was successful. #> ── Summary ───────────────────────────────────────────────────────────────────── #> ✔ Checking successful! scc_model <- create_scc(steplist_checked) #>  #> ── Create SCC Model ── #>  #> ✔ 15/15 | Check if set of component causes is sufficient #> ✔ 5/5 | Check if sufficiency dependends on IFNOT conditions #> ✔ 5/5 | Check if sufficient cause is minimal #> ℹ 2/5 sufficient causes are minimal  # Derive mechanisms mech <- mechanism(scc_model)  # new_mechanism() and validate_mechanism() are used inside mechanism() # nonetheless, you can check its structure using validate_mechanism() validate_mechanism(mech) #>  Label Module   Step           #>  CC1   activity no vacation    #>  CC2   fate     weekday        #>  CC3   weather  rain           #>  CC4   activity get groceries  #>  I1    activity take vacation  #>  I2    activity take umbrella  #>  I3    activity work from home #>  S1    activity walk to work   #>  S2    activity go outside     #>  E1    weather  you get wet     # Plot the mechanisms plot(mech) #> $SC2 #>  #> $SC1 #>   # Print the legend print(mech) #>  Label Module   Step           #>  CC1   activity no vacation    #>  CC2   fate     weekday        #>  CC3   weather  rain           #>  CC4   activity get groceries  #>  I1    activity take vacation  #>  I2    activity take umbrella  #>  I3    activity work from home #>  S1    activity walk to work   #>  S2    activity go outside     #>  E1    weather  you get wet    mech #>  Label Module   Step           #>  CC1   activity no vacation    #>  CC2   fate     weekday        #>  CC3   weather  rain           #>  CC4   activity get groceries  #>  I1    activity take vacation  #>  I2    activity take umbrella  #>  I3    activity work from home #>  S1    activity walk to work   #>  S2    activity go outside     #>  E1    weather  you get wet     # Export mechanism plots if (FALSE) { # \\dontrun{ export_mechanism(mech, file_name = \"folder/file.png\", title = \"Sufficient Cause\") } # }"},{"path":"https://forsterepi.github.io/epicmodel/reference/plot_dag.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot DAG — plot_dag","title":"Plot DAG — plot_dag","text":"Creates ggplot dagitty object, using packages dagitty ggdag. Mimics format colors used dagitty homepage www.dagitty.net. Please note recommendation argument label_shift : Getting values label_shift right can iterative slightly tedious procedure. highly recommended evaluate result current values already saved plot using, e.g., ggsave RStudio Viewer.","code":""},{"path":"https://forsterepi.github.io/epicmodel/reference/plot_dag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot DAG — plot_dag","text":"","code":"plot_dag(   dag,   node_outc = NULL,   node_expo = NULL,   node_adj = NULL,   node_latent = NULL,   path_causal = NULL,   path_biased = NULL,   label = NULL,   label_shift = NULL,   label_size = 2.5,   node_size = 7,   node_stroke = 1,   e_w = 0.4,   cap_mm = 4,   scc = FALSE,   scc_size = c(0.1, 0.35),   scc_shift = c(0, 0),   scc_angle = 0 )"},{"path":"https://forsterepi.github.io/epicmodel/reference/plot_dag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot DAG — plot_dag","text":"dag object class dagitty. Can created using dagitty::dagitty('[model_code]') scc_to_dag(). DAG created scc_to_dag(), make sure pass first element (named dag) plot_dag. node_outc single element type character NULL (default). outcome yet specified dag, can done specifiying name corresponding node. node_expo single element type character NULL (default). exposure yet specified dag, can done specifiying name corresponding node. node_adj character vector NULL (default). Specify names nodes defined \"adjusted\". node_latent character vector NULL (default). Specify names nodes defined \"latent\". path_causal character vector NULL (default). Specify names paths format \"V1->V2\" defined \"causal\". path_biased character vector NULL (default). Specify names paths format \"V1->V2\" defined \"biased\". label named character vector NULL (default). Change name nodes graph, .e., labels. vector elements correspond new names, vector names correspond old node names, .e., label = c(old_name = \"new_name\"). label_shift named list (elements numerical vectors length 2) NULL (default). Numerical values used move labels corresponding nodes x y direction, respectively. list names correspond nodes values apply. Possible list names node names (initial names prior changing via label), node types, .e., outcome, exposure, adjusted, latent, , well , applies nodes. node addressed several entries, e.g., name , entries summed . See example . Getting values label_shift right can iterative slightly tedious procedure. highly recommended evaluate result current values already saved plot using, e.g., ggsave RStudio Viewer. label_size single numeric value, controls font size label. Default 2.5. node_size single numeric value, controls size circle represents node. Default 7. node_stroke single numeric value, controls size black border around node circles. Default 1. e_w single numeric value, controls edge width. Default 0.4. cap_mm single numeric value, controls distance, .e., white space, node ends edge begins/ edge ends node begins. Higher values correspond shorter edges/arrows. Default 4. scc TRUE FALSE (default). applies DAGs based sufficient-component cause (SCC) models. TRUE, ellipse added DAG, surround sufficient cause variables, determinative set sufficient causes, suggested VanderWeele Robins (2007). DAG based SCC, leave scc FALSE. scc_size numeric vector length 2, controls size ellipse. Default c(0.1, 0.35). scc_shift numeric vector length 2, controls shift complete ellipse x y direction. Default c(0, 0). scc_angle single numeric value, controls rotiation ellipse degree units. Default 0.","code":""},{"path":"https://forsterepi.github.io/epicmodel/reference/plot_dag.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot DAG — plot_dag","text":"ggplot object.","code":""},{"path":"https://forsterepi.github.io/epicmodel/reference/plot_dag.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Plot DAG — plot_dag","text":"VanderWeele TJ, Robins JM (2007): Directed acyclic graphs, sufficient causes, properties conditioning common effect. American Journal Epidemiology 166 (9): 1096–1104.","code":""},{"path":[]},{"path":"https://forsterepi.github.io/epicmodel/reference/plot_dag.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot DAG — plot_dag","text":"","code":"# Create some SCC model steplist_checked <- check_steplist(steplist_rain) #>  #> ── Checking epicmodel_steplist steplist_rain ─────────────────────────────────── #> ✔ Checking WHAT IDs was successful. #> ✔ Checking DOES IDs was successful. #> ✔ Checking WHERE IDs was successful. #> ✔ Checking Module IDs was successful. #> ✔ Checking ICC IDs was successful. #> ✔ Checking WHAT keywords was successful. #> ✔ Checking DOES keywords was successful. #> ✔ Checking WHERE keywords was successful. #> ✔ Checking Module keywords was successful. #> ✔ Checking Modules was successful. #> ✔ Checking ICC entries was successful. #> ✔ Checking WHAT segments was successful. #> ✔ Checking DOES segments was successful. #> ✔ Checking WHERE segments was successful. #> ✔ Checking references was successful. #> ✔ Checking start/end steps was successful. #> ✔ Checking THEN statements was successful. #> ✔ Checking THEN/IF/IFNOT equality was successful. #> ✔ Checking outcome definitions was successful. #> ── Summary ───────────────────────────────────────────────────────────────────── #> ✔ Checking successful! scc_model <- create_scc(steplist_checked) #>  #> ── Create SCC Model ── #>  #> ✔ 15/15 | Check if set of component causes is sufficient #> ✔ 5/5 | Check if sufficiency dependends on IFNOT conditions #> ✔ 5/5 | Check if sufficient cause is minimal #> ℹ 2/5 sufficient causes are minimal  # Transform it into a DAG dag <- scc_to_dag(scc_model)[[\"dag\"]]  # Plot DAG plot_dag(dag, label_shift = list(all = c(0,0.15), outcome = c(0.05,0)))   # plot_dag() works also with dagitty objects created in other ways dag_to_plot <- dagitty::dagitty('dag { bb=\"-2.628,-2.412,2.659,2.378\" V1 [pos=\"-2.128,-1.912\"] V2 [pos=\"-0.031,0.035\"] V3 [pos=\"2.159,1.878\"] V1 -> V2 V2 -> V3 }') plot_dag(dag_to_plot, node_outc = \"V3\", node_expo = \"V1\", label = c(V3 = \"outcome\"))"},{"path":"https://forsterepi.github.io/epicmodel/reference/remove_all_modules.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove all modules — remove_all_modules","title":"Remove all modules — remove_all_modules","text":"Removes entries data.frame module epicmodel_steplist object. Also turns values variable module_step data.frame step epicmodel_steplist empty strings.","code":""},{"path":"https://forsterepi.github.io/epicmodel/reference/remove_all_modules.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove all modules — remove_all_modules","text":"","code":"remove_all_modules(steplist)"},{"path":"https://forsterepi.github.io/epicmodel/reference/remove_all_modules.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove all modules — remove_all_modules","text":"steplist epicmodel_steplist epicmodel_steplist_checked object.","code":""},{"path":"https://forsterepi.github.io/epicmodel/reference/remove_all_modules.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove all modules — remove_all_modules","text":"epicmodel_steplist object empty data.frame module empty strings variable module_step data.frame step. continuing steplist, SCC models inspected module. made changes, need call check_steplist() .","code":""},{"path":"https://forsterepi.github.io/epicmodel/reference/remove_all_modules.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove all modules — remove_all_modules","text":"","code":"x <- remove_all_modules(steplist_party)"},{"path":"https://forsterepi.github.io/epicmodel/reference/remove_na.html","id":null,"dir":"Reference","previous_headings":"","what":"Removing NA in icc and outc — remove_na","title":"Removing NA in icc and outc — remove_na","text":"Remove entries consist NA data.frames icc (Incompatible Component Causes) outc (outcome definition) epicmodel_steplist.","code":""},{"path":"https://forsterepi.github.io/epicmodel/reference/remove_na.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Removing NA in icc and outc — remove_na","text":"","code":"remove_na(steplist)"},{"path":"https://forsterepi.github.io/epicmodel/reference/remove_na.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Removing NA in icc and outc — remove_na","text":"steplist epicmodel_steplist epicmodel_steplist_checked object.","code":""},{"path":"https://forsterepi.github.io/epicmodel/reference/remove_na.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Removing NA in icc and outc — remove_na","text":"epicmodel_steplist object without entries data.frame icc, contain 'NA' either id1 id2 well entries data.frame outc contain 'NA' id_outc. made changes, need call check_steplist() .","code":""},{"path":"https://forsterepi.github.io/epicmodel/reference/remove_na.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Removing NA in icc and outc — remove_na","text":"","code":"x <- remove_na(steplist_party)"},{"path":"https://forsterepi.github.io/epicmodel/reference/remove_segment.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove segments — remove_segment","title":"Remove segments — remove_segment","text":"Removes individual entries data.frames , , , module, icc.","code":""},{"path":"https://forsterepi.github.io/epicmodel/reference/remove_segment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove segments — remove_segment","text":"","code":"remove_segment(steplist, id)"},{"path":"https://forsterepi.github.io/epicmodel/reference/remove_segment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove segments — remove_segment","text":"steplist epicmodel_steplist epicmodel_steplist_checked object. id single non-missing element type character describing ID entry want deleted.","code":""},{"path":"https://forsterepi.github.io/epicmodel/reference/remove_segment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove segments — remove_segment","text":"epicmodel_steplist class object. made changes, need call check_steplist() .","code":""},{"path":"https://forsterepi.github.io/epicmodel/reference/remove_segment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove segments — remove_segment","text":"","code":"steplist_party <- remove_segment(steplist_party, \"d4\")"},{"path":"https://forsterepi.github.io/epicmodel/reference/sc_contain_steps.html","id":null,"dir":"Reference","previous_headings":"","what":"Do steps appear in sufficient causes? — sc_contain_steps","title":"Do steps appear in sufficient causes? — sc_contain_steps","text":"Extracts SCC model, certain steps part mechanism sufficient causes. want list steps, ignore argument steps.","code":""},{"path":"https://forsterepi.github.io/epicmodel/reference/sc_contain_steps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Do steps appear in sufficient causes? — sc_contain_steps","text":"","code":"sc_contain_steps(scc, steps = NULL, output = c(\"nice\", \"table\"))"},{"path":"https://forsterepi.github.io/epicmodel/reference/sc_contain_steps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Do steps appear in sufficient causes? — sc_contain_steps","text":"scc object class epicmodel_scc. steps character vector containing step IDs. NULL (default), provides list steps. output single element type character, either \"nice\" (default) \"table\". \"table\", returns list (data.frame steps = NULL). \"nice\", nicely formated output printed console.","code":""},{"path":"https://forsterepi.github.io/epicmodel/reference/sc_contain_steps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Do steps appear in sufficient causes? — sc_contain_steps","text":"Either list (output = \"table\") length equal number sufficient causes element named vector TRUE/FALSE variables steps names TRUE indicating step appears corresponding sufficient cause, nicely formated output console (output = \"nice\"). steps = NULL output = \"table\", returns data.frame, contains variables id_step desc_step epicmodel_steplist_checked data.frame step.","code":""},{"path":"https://forsterepi.github.io/epicmodel/reference/sc_contain_steps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Do steps appear in sufficient causes? — sc_contain_steps","text":"","code":"# Create some SCC model steplist_checked <- check_steplist(steplist_rain) #>  #> ── Checking epicmodel_steplist steplist_rain ─────────────────────────────────── #> ✔ Checking WHAT IDs was successful. #> ✔ Checking DOES IDs was successful. #> ✔ Checking WHERE IDs was successful. #> ✔ Checking Module IDs was successful. #> ✔ Checking ICC IDs was successful. #> ✔ Checking WHAT keywords was successful. #> ✔ Checking DOES keywords was successful. #> ✔ Checking WHERE keywords was successful. #> ✔ Checking Module keywords was successful. #> ✔ Checking Modules was successful. #> ✔ Checking ICC entries was successful. #> ✔ Checking WHAT segments was successful. #> ✔ Checking DOES segments was successful. #> ✔ Checking WHERE segments was successful. #> ✔ Checking references was successful. #> ✔ Checking start/end steps was successful. #> ✔ Checking THEN statements was successful. #> ✔ Checking THEN/IF/IFNOT equality was successful. #> ✔ Checking outcome definitions was successful. #> ── Summary ───────────────────────────────────────────────────────────────────── #> ✔ Checking successful! scc_model <- create_scc(steplist_checked) #>  #> ── Create SCC Model ── #>  #> ✔ 15/15 | Check if set of component causes is sufficient #> ✔ 5/5 | Check if sufficiency dependends on IFNOT conditions #> ✔ 5/5 | Check if sufficient cause is minimal #> ℹ 2/5 sufficient causes are minimal  # Check if one or more steps are part of the mechanism for each sufficient cause sc_contain_steps(scc_model, c(\"THENa1\",\"THENa5\")) #>  #> ── SC 1 ── #>  #> Component causes: #> • rain #> • get groceries #>  #> ✔ SC1 contains step 'Start: rain' (THENa1) #> ✖ SC1 does not contain step 'Start: weekday' (THENa5) #>  #> ── SC 2 ── #>  #> Component causes: #> • no vacation #> • weekday #> • rain #>  #> ✔ SC2 contains step 'Start: rain' (THENa1) #> ✔ SC2 contains step 'Start: weekday' (THENa5)"},{"path":"https://forsterepi.github.io/epicmodel/reference/scc_cause_sets.html","id":null,"dir":"Reference","previous_headings":"","what":"Extracting component causes from SCC model — scc_cause_sets","title":"Extracting component causes from SCC model — scc_cause_sets","text":"Extracting component causes sufficient cause epicmodel_scc object.","code":""},{"path":"https://forsterepi.github.io/epicmodel/reference/scc_cause_sets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extracting component causes from SCC model — scc_cause_sets","text":"","code":"scc_cause_sets(   scc,   output = c(\"id\", \"desc\", \"desc_no_start\", \"all\"),   depends = TRUE,   unknown = FALSE )"},{"path":"https://forsterepi.github.io/epicmodel/reference/scc_cause_sets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extracting component causes from SCC model — scc_cause_sets","text":"scc object class epicmodel_scc. output single element type character, determines type output. Options \"id\", \"desc\", \"desc_no_start\", \"\". See returns-part description. depends TRUE (default) FALSE. FALSE, includes sufficient causes sc_status \"always\". unknown TRUE FALSE (default). TRUE, unknown causes added SCC model: every sufficient cause gets additional individual unknown component cause representing additional unknown components; unknown sufficient cause added model consisting single unknown component cause representing unknown sufficient causes.","code":""},{"path":"https://forsterepi.github.io/epicmodel/reference/scc_cause_sets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extracting component causes from SCC model — scc_cause_sets","text":"named list content depends parameter \"output\". names correspond component cause set IDs, .e., cc[[:digit:]]+. id: Returns named list character vectors. vector contains step IDs component causes. desc: Returns named list character vectors. vector contains step descriptions component causes. desc_no_start: Returns named list character vectors. vector contains step descriptions component causes, \"Start: \" beginning removed. : named list three lists . names correspond corresponding option parameter \"output\".","code":""},{"path":"https://forsterepi.github.io/epicmodel/reference/scc_cause_sets.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extracting component causes from SCC model — scc_cause_sets","text":"","code":"# Create some SCC model steplist_checked <- check_steplist(steplist_rain) #>  #> ── Checking epicmodel_steplist steplist_rain ─────────────────────────────────── #> ✔ Checking WHAT IDs was successful. #> ✔ Checking DOES IDs was successful. #> ✔ Checking WHERE IDs was successful. #> ✔ Checking Module IDs was successful. #> ✔ Checking ICC IDs was successful. #> ✔ Checking WHAT keywords was successful. #> ✔ Checking DOES keywords was successful. #> ✔ Checking WHERE keywords was successful. #> ✔ Checking Module keywords was successful. #> ✔ Checking Modules was successful. #> ✔ Checking ICC entries was successful. #> ✔ Checking WHAT segments was successful. #> ✔ Checking DOES segments was successful. #> ✔ Checking WHERE segments was successful. #> ✔ Checking references was successful. #> ✔ Checking start/end steps was successful. #> ✔ Checking THEN statements was successful. #> ✔ Checking THEN/IF/IFNOT equality was successful. #> ✔ Checking outcome definitions was successful. #> ── Summary ───────────────────────────────────────────────────────────────────── #> ✔ Checking successful! scc_model <- create_scc(steplist_checked) #>  #> ── Create SCC Model ── #>  #> ✔ 15/15 | Check if set of component causes is sufficient #> ✔ 5/5 | Check if sufficiency dependends on IFNOT conditions #> ✔ 5/5 | Check if sufficient cause is minimal #> ℹ 2/5 sufficient causes are minimal  # Get sets of component causes that form the sufficient causes scc_cause_sets(scc_model, output = \"all\") #> $id #> $id$cc5 #> [1] \"THENa1\"   \"THENd2a3\" #>  #> $id$cc14 #> [1] \"IFNOTd6a6THENd5a6\" \"THENa5\"            \"THENa1\"            #>  #>  #> $desc #> $desc$cc5 #> [1] \"Start: rain\"          \"Start: get groceries\" #>  #> $desc$cc14 #> [1] \"Start: IFNOT take vacation THEN no vacation\" #> [2] \"Start: weekday\"                              #> [3] \"Start: rain\"                                 #>  #>  #> $desc_no_start #> $desc_no_start$cc5 #> [1] \"rain\"          \"get groceries\" #>  #> $desc_no_start$cc14 #> [1] \"no vacation\" \"weekday\"     \"rain\"        #>  #>"},{"path":"https://forsterepi.github.io/epicmodel/reference/scc_to_dag.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform SCC to DAG — scc_to_dag","title":"Transform SCC to DAG — scc_to_dag","text":"Creates object class dagitty (dagitty package) SCC model, following VanderWeele Robins (2007).","code":""},{"path":"https://forsterepi.github.io/epicmodel/reference/scc_to_dag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform SCC to DAG — scc_to_dag","text":"","code":"scc_to_dag(scc, unknown = TRUE)"},{"path":"https://forsterepi.github.io/epicmodel/reference/scc_to_dag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform SCC to DAG — scc_to_dag","text":"scc object class epicmodel_scc. unknown TRUE (default) FALSE. TRUE, unknown causes added SCC model: every sufficient cause gets additional individual unknown component cause representing additional unknown components; unknown sufficient cause added model consisting single unknown component cause representing unknown sufficient causes.","code":""},{"path":"https://forsterepi.github.io/epicmodel/reference/scc_to_dag.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform SCC to DAG — scc_to_dag","text":"list length 2 containing object class dagitty (named dag) data.frame containing information, label DAG corresponds component cause (named legend).","code":""},{"path":"https://forsterepi.github.io/epicmodel/reference/scc_to_dag.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Transform SCC to DAG — scc_to_dag","text":"VanderWeele TJ, Robins JM (2007): Directed acyclic graphs, sufficient causes, properties conditioning common effect. American Journal Epidemiology 166 (9): 1096–1104.","code":""},{"path":[]},{"path":"https://forsterepi.github.io/epicmodel/reference/scc_to_dag.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform SCC to DAG — scc_to_dag","text":"","code":"# Create some SCC model steplist_checked <- check_steplist(steplist_rain) #>  #> ── Checking epicmodel_steplist steplist_rain ─────────────────────────────────── #> ✔ Checking WHAT IDs was successful. #> ✔ Checking DOES IDs was successful. #> ✔ Checking WHERE IDs was successful. #> ✔ Checking Module IDs was successful. #> ✔ Checking ICC IDs was successful. #> ✔ Checking WHAT keywords was successful. #> ✔ Checking DOES keywords was successful. #> ✔ Checking WHERE keywords was successful. #> ✔ Checking Module keywords was successful. #> ✔ Checking Modules was successful. #> ✔ Checking ICC entries was successful. #> ✔ Checking WHAT segments was successful. #> ✔ Checking DOES segments was successful. #> ✔ Checking WHERE segments was successful. #> ✔ Checking references was successful. #> ✔ Checking start/end steps was successful. #> ✔ Checking THEN statements was successful. #> ✔ Checking THEN/IF/IFNOT equality was successful. #> ✔ Checking outcome definitions was successful. #> ── Summary ───────────────────────────────────────────────────────────────────── #> ✔ Checking successful! scc_model <- create_scc(steplist_checked) #>  #> ── Create SCC Model ── #>  #> ✔ 15/15 | Check if set of component causes is sufficient #> ✔ 5/5 | Check if sufficiency dependends on IFNOT conditions #> ✔ 5/5 | Check if sufficient cause is minimal #> ℹ 2/5 sufficient causes are minimal  # Transform it into a DAG scc_to_dag(scc_model) #> $dag #> dag { #> CC1 [pos=\"1.000,0.250\"] #> CC2 [pos=\"1.000,0.750\"] #> CC3 [pos=\"1.000,1.250\"] #> CC4 [pos=\"1.000,1.750\"] #> O [outcome,pos=\"4.000,1.000\"] #> SC1 [pos=\"3.000,0.000\"] #> SC2 [pos=\"3.000,1.000\"] #> USC [pos=\"3.000,2.000\"] #> U_SC1 [pos=\"2.000,0.000\"] #> U_SC2 [pos=\"2.000,1.000\"] #> U_USC [pos=\"2.000,2.000\"] #> CC1 -> SC1 #> CC1 -> SC2 #> CC2 -> SC1 #> CC3 -> SC2 #> CC4 -> SC2 #> SC1 -> O #> SC2 -> O #> USC -> O #> U_SC1 -> SC1 #> U_SC2 -> SC2 #> U_USC -> USC #> } #>  #> $legend #>            desc label #> 1          rain   CC1 #> 2 get groceries   CC2 #> 3   no vacation   CC3 #> 4       weekday   CC4 #>"},{"path":"https://forsterepi.github.io/epicmodel/reference/show_steps.html","id":null,"dir":"Reference","previous_headings":"","what":"Show all steps of a SCC model — show_steps","title":"Show all steps of a SCC model — show_steps","text":"Prints steps part sufficient-component cause model. function wraps sc_contain_steps() steps = NULL.","code":""},{"path":"https://forsterepi.github.io/epicmodel/reference/show_steps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show all steps of a SCC model — show_steps","text":"","code":"show_steps(scc, output = c(\"nice\", \"table\"))"},{"path":"https://forsterepi.github.io/epicmodel/reference/show_steps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show all steps of a SCC model — show_steps","text":"scc object class epicmodel_scc. output single element type character, either \"nice\" (default) \"table\". \"table\", returns data.frame. \"nice\", nicely formated output printed console.","code":""},{"path":"https://forsterepi.github.io/epicmodel/reference/show_steps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show all steps of a SCC model — show_steps","text":"Either data.frame (output = \"table\") variables id_step (step ID) desc_step (step description) one row every step model, .e., epicmodel_steplist_checked data.frame step, nicely formated output console (output = \"nice\").","code":""},{"path":"https://forsterepi.github.io/epicmodel/reference/show_steps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show all steps of a SCC model — show_steps","text":"","code":"# Create some SCC model steplist_checked <- check_steplist(steplist_rain) #>  #> ── Checking epicmodel_steplist steplist_rain ─────────────────────────────────── #> ✔ Checking WHAT IDs was successful. #> ✔ Checking DOES IDs was successful. #> ✔ Checking WHERE IDs was successful. #> ✔ Checking Module IDs was successful. #> ✔ Checking ICC IDs was successful. #> ✔ Checking WHAT keywords was successful. #> ✔ Checking DOES keywords was successful. #> ✔ Checking WHERE keywords was successful. #> ✔ Checking Module keywords was successful. #> ✔ Checking Modules was successful. #> ✔ Checking ICC entries was successful. #> ✔ Checking WHAT segments was successful. #> ✔ Checking DOES segments was successful. #> ✔ Checking WHERE segments was successful. #> ✔ Checking references was successful. #> ✔ Checking start/end steps was successful. #> ✔ Checking THEN statements was successful. #> ✔ Checking THEN/IF/IFNOT equality was successful. #> ✔ Checking outcome definitions was successful. #> ── Summary ───────────────────────────────────────────────────────────────────── #> ✔ Checking successful! scc_model <- create_scc(steplist_checked) #>  #> ── Create SCC Model ── #>  #> ✔ 15/15 | Check if set of component causes is sufficient #> ✔ 5/5 | Check if sufficiency dependends on IFNOT conditions #> ✔ 5/5 | Check if sufficient cause is minimal #> ℹ 2/5 sufficient causes are minimal  # Show all steps show_steps(scc_model) #> • THENd6a6: Start: take vacation #> • IFNOTd6a6THENd5a6: Start: IFNOT take vacation THEN no vacation #> • THENa5: Start: weekday #> • THENa1: Start: rain #> • THENd6a7: Start: take umbrella #> • THENd4e1: Start: work from home #> • THENd2a3: Start: get groceries #> • IFd5a6+a5IFNOTd4e1THENd3e3: IF no vacation and weekday and IFNOT work from #> home THEN walk to work #> • IF(d2a3)or(d3e3)THENd1e2: IF get groceries or walk to work THEN go outside #> • IFd1e2+a1IFNOTd6a7THENa8d2a2: End: IF go outside and rain and IFNOT take #> umbrella THEN you get wet"},{"path":"https://forsterepi.github.io/epicmodel/reference/steplist_party.html","id":null,"dir":"Reference","previous_headings":"","what":"Birthday party example steplist — steplist_party","title":"Birthday party example steplist — steplist_party","text":"example steplist, contains steps tell Clara, conditions birthday party success.","code":""},{"path":"https://forsterepi.github.io/epicmodel/reference/steplist_party.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Birthday party example steplist — steplist_party","text":"","code":"steplist_party"},{"path":"https://forsterepi.github.io/epicmodel/reference/steplist_party.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Birthday party example steplist — steplist_party","text":"object class epicmodel_steplist, list 8 data.frames. See new_steplist() detailed structure epicmodel_steplist class objects.","code":""},{"path":"https://forsterepi.github.io/epicmodel/reference/steplist_rain.html","id":null,"dir":"Reference","previous_headings":"","what":"Rain example steplist — steplist_rain","title":"Rain example steplist — steplist_rain","text":"example steplist, contains rain-themed example illustrate intervention functions.","code":""},{"path":"https://forsterepi.github.io/epicmodel/reference/steplist_rain.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rain example steplist — steplist_rain","text":"","code":"steplist_rain"},{"path":"https://forsterepi.github.io/epicmodel/reference/steplist_rain.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Rain example steplist — steplist_rain","text":"object class epicmodel_steplist, list 8 data.frames. See new_steplist() detailed structure epicmodel_steplist class objects.","code":""},{"path":"https://forsterepi.github.io/epicmodel/news/index.html","id":"epicmodel-development-version","dir":"Changelog","previous_headings":"","what":"epicmodel (development version)","title":"epicmodel (development version)","text":"Initial CRAN submission.","code":""}]
